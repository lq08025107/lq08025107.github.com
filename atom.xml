<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[刘强的博客]]></title>
  <subtitle><![CDATA[Watch and Learn]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lq08025107.github.io/"/>
  <updated>2016-11-23T14:47:28.696Z</updated>
  <id>http://lq08025107.github.io/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Awesosme Microservices]]></title>
    <link href="http://lq08025107.github.io/2016/11/23/Awesosme-Microservices/"/>
    <id>http://lq08025107.github.io/2016/11/23/Awesosme-Microservices/</id>
    <published>2016-11-23T14:44:18.000Z</published>
    <updated>2016-11-23T14:47:28.696Z</updated>
    <content type="html"><![CDATA[<p><strong>转载</strong></p>
<p>原地址：<a href="https://github.com/mfornos/awesome-microservices" target="_blank" rel="external">https://github.com/mfornos/awesome-microservices</a></p>
<p>A curated list of Microservice Architecture related principles and technologies.</p>
<!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="/#platforms">Platforms</a></li>
<li><a href="/#runtimes">Runtimes</a></li>
<li><a href="/#service-toolkits">Service Toolkits</a><ul>
<li><a href="/#agnostic">Agnostic</a></li>
<li><a href="/#c">C</a></li>
<li><a href="/#c-1">C++</a></li>
<li><a href="/#d">D</a></li>
<li><a href="/#erlang-vm">Erlang VM</a></li>
<li><a href="/#go">Go</a></li>
<li><a href="/#haskell">Haskell</a></li>
<li><a href="/#java-vm">Java VM</a></li>
<li><a href="/#nodejs">Node.js</a></li>
<li><a href="/#perl">Perl</a></li>
<li><a href="/#php">PHP</a></li>
<li><a href="/#python">Python</a></li>
<li><a href="/#ruby">Ruby</a></li>
</ul>
</li>
<li><a href="/#capabilities">Capabilities</a><ul>
<li><a href="/#api-gateways--edge-services">API Gateways / Edge Services</a></li>
<li><a href="/#configuration-and-discovery">Configuration and Discovery</a></li>
<li><a href="/#security">Security</a></li>
<li><a href="/#job-schedulers--workload-automation">Job Schedulers / Workload Automation</a></li>
<li><a href="/#elasticity">Elasticity</a></li>
<li><a href="/#messaging">Messaging</a></li>
<li><a href="/#serialization">Serialization</a></li>
<li><a href="/#storage">Storage</a></li>
<li><a href="/#reactivity">Reactivity</a></li>
<li><a href="/#resilience">Resilience</a></li>
<li><a href="/#testing">Testing</a></li>
<li><a href="/#monitoring-and-debugging">Monitoring and Debugging</a></li>
<li><a href="/#logging">Logging</a></li>
</ul>
</li>
<li><a href="/#it-automation--provisioning">IT Automation / Provisioning</a></li>
<li><a href="/#deployment-and-continuous-integration">Deployment and Continuous Integration</a><ul>
<li><a href="/#on-prem">On-prem</a></li>
<li><a href="/#hosted">Hosted</a></li>
<li><a href="/#lightweight">Lightweight</a></li>
</ul>
</li>
<li><a href="/#containers">Containers</a></li>
<li><a href="/#documentation--modeling">Documentation &amp; Modeling</a><ul>
<li><a href="/#rest-apis">REST APIs</a></li>
</ul>
</li>
<li><a href="/#standards--recommendations">Standards / Recommendations</a><ul>
<li><a href="/#world-wide-web">World Wide Web</a></li>
<li><a href="/#http11">HTTP/1.1</a></li>
<li><a href="/#http2">HTTP/2</a></li>
<li><a href="/#coap">CoAP</a></li>
<li><a href="/#rpc">RPC</a></li>
<li><a href="/#messaging-1">Messaging</a></li>
<li><a href="/#security-1">Security</a></li>
<li><a href="/#service-discovery">Service Discovery</a></li>
<li><a href="/#data-formats">Data Formats</a></li>
<li><a href="/#vocabularies">Vocabularies</a></li>
<li><a href="/#unicode">Unicode</a></li>
</ul>
</li>
<li><a href="/#real-life-stories">Real Life Stories</a></li>
<li><a href="/#theory">Theory</a><ul>
<li><a href="/#articles--papers">Articles &amp; Papers</a></li>
<li><a href="/#talks">Talks</a></li>
<li><a href="/#tutorials">Tutorials</a></li>
<li><a href="/#books">Books</a></li>
<li><a href="/#sites">Sites</a></li>
</ul>
</li>
<li><a href="/#emerging-technologies">Emerging Technologies</a></li>
<li><a href="/#license">License</a></li>
<li><a href="/#contributing">Contributing</a></li>
<li><a href="/#acknowledgments">Acknowledgments</a></li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="Platforms"><a href="#Platforms" class="headerlink" title="Platforms"></a>Platforms</h2><ul>
<li><a href="https://github.com/CiscoCloud/microservices-infrastructure" target="_blank" rel="external">Cisco Microservices</a> - Modern platform for rapidly deploying globally distributed services.</li>
<li><a href="https://github.com/cocaine" target="_blank" rel="external">Cocaine</a> - A cloud platform enabling you to build your own PaaS clouds.</li>
<li><a href="http://deis.io/" target="_blank" rel="external">Deis</a> - Open source application platform for public and private clouds.</li>
<li><a href="http://fabric8.io/" target="_blank" rel="external">Fabric8</a> - Open source microservices platform based on Docker, Kubernetes and Jenkins. Makes it easy to create, edit, deploy and manage microservices and go faster.</li>
<li><a href="https://hook.io/" target="_blank" rel="external">Hook.io</a> - Open source hosting platform for microservices.</li>
<li><a href="http://lattice.cf/" target="_blank" rel="external">Lattice</a> - Open source project for running containerized workloads on a cluster. Lattice bundles up http load-balancing, a cluster scheduler, log aggregation/streaming and health management into an easy-to-deploy and easy-to-use package.</li>
<li><a href="https://netflix.github.io/" target="_blank" rel="external">Netflix OSS</a> - Netflix open source software ecosystem.</li>
<li><a href="https://github.com/spring-cloud/spring-cloud-netflix" target="_blank" rel="external">Spring Cloud Netflix</a> - Provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms.</li>
<li><a href="http://vamp.io/" target="_blank" rel="external">VAMP</a> - Build, deploy and manage microservices with power and ease.</li>
</ul>
<h2 id="Runtimes"><a href="#Runtimes" class="headerlink" title="Runtimes"></a>Runtimes</h2><ul>
<li><a href="http://akka.io/" target="_blank" rel="external">Akka</a> - Toolkit and runtime for building highly concurrent, distributed, and resilient message-driven applications on the JVM.</li>
<li><a href="http://baratine.io/" target="_blank" rel="external">Baratine</a> - Platform for building a network of loosely-coupled POJO microservices.</li>
<li><a href="https://github.com/erlang/otp" target="_blank" rel="external">Erlang/OTP</a> - Programming language used to build massively scalable soft real-time systems with requirements on high availability.</li>
<li><a href="http://twitter.github.io/finagle" target="_blank" rel="external">Finagle</a> - Extensible RPC system for the JVM, used to construct high-concurrency servers.</li>
<li><a href="https://github.com/GPars/GPars" target="_blank" rel="external">GPars</a> - Concurrency and Parallelism framework for the JVM.</li>
<li><a href="https://github.com/Netflix/karyon" target="_blank" rel="external">Karyon</a> - The nucleus or the base container for applications and services built using the NetflixOSS ecosystem.</li>
<li><a href="https://github.com/lagom/lagom" target="_blank" rel="external">Lagom</a> - Reactive microservices for the JVM.</li>
<li><a href="https://github.com/aol/micro-server" target="_blank" rel="external">Microserver</a> - Java 8 native, zero configuration, standards based, battle hardened library to run Java REST microservices.</li>
<li><a href="http://orbit.bioware.com/" target="_blank" rel="external">Orbit</a> - Modern framework for JVM languages that makes it easier to build and maintain distributed and scalable online services.</li>
<li><a href="https://github.com/puniverse/quasar" target="_blank" rel="external">Quasar</a> - Fibers, Channels and Actors for the JVM.</li>
<li><a href="http://scalecube.io" target="_blank" rel="external">Service Fabric I/O</a> - A microservices framework for the rapid development of distributed, resilient, reactive applications at scale.</li>
<li><a href="http://vertx.io/" target="_blank" rel="external">Vert.X</a> - Toolkit for building reactive applications on the JVM.</li>
<li><a href="https://github.com/vert-x3/vertx-microservices-toolbox" target="_blank" rel="external">Vert.X Toolbox</a> - A set of Vert.x components to build reactive microservice applications.</li>
</ul>
<h2 id="Service_Toolkits"><a href="#Service_Toolkits" class="headerlink" title="Service Toolkits"></a>Service Toolkits</h2><h3 id="Agnostic"><a href="#Agnostic" class="headerlink" title="Agnostic"></a>Agnostic</h3><ul>
<li><a href="https://github.com/apex/apex" target="_blank" rel="external">Apex</a> - Tool for deploying and managing AWS Lambda functions. With shims for languages not yet supported by Lambda, you can use Golang out of the box.</li>
<li><a href="http://coap.technology/impls.html" target="_blank" rel="external">CoAP</a> - Constrained Application Protocol implementations.</li>
<li><a href="http://www.grpc.io/" target="_blank" rel="external">GRPC</a> - A high performance, open source, general RPC framework that puts mobile and HTTP/2 first. Libraries in C, C++, Java, Go, Node.js, Python, Ruby, Objective-C, PHP and C#.</li>
<li><a href="http://github.com/hprose" target="_blank" rel="external">Hprose</a> - A very newbility RPC Library, support 25+ languages now.</li>
</ul>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul>
<li><a href="https://kore.io/" target="_blank" rel="external">Kore</a> - Easy to use web application framework for writing scalable web APIs in C.</li>
<li><a href="https://github.com/wolkykim/libasyncd/" target="_blank" rel="external">Libasyncd</a> - Embeddable event-based asynchronous HTTP server library for C.</li>
<li><a href="http://libslack.org/" target="_blank" rel="external">Libslack</a> -  Provides a generic agent oriented programming model, run time selection of locking strategies, functions that make writing daemons trivial and simplify the implementation of network servers and clients, &amp;c.</li>
<li><a href="http://lwan.ws/" target="_blank" rel="external">Lwan</a> - High-performance and scalable web server.</li>
<li><a href="https://github.com/davidmoreno/onion" target="_blank" rel="external">Onion</a> - C library to create simple HTTP servers and web applications.</li>
<li><a href="https://github.com/Adaptv/ribs2" target="_blank" rel="external">RIBS2</a> - Library which allows building high-performance internet serving systems.</li>
</ul>
<h3 id="C++"><a href="#C++" class="headerlink" title="C++"></a>C++</h3><!-- #c-1 anchor -->
<ul>
<li><a href="https://github.com/sgieseking/anyrpc" target="_blank" rel="external">AnyRPC</a> - Provides a common system to work with a number of different remote procedure call standards, including: JSON-RPC, XML-RPC, MessagePack-RPC.</li>
<li><a href="https://capnproto.org/cxxrpc.html" target="_blank" rel="external">Cap’n Proto RPC</a> - The Cap’n Proto C++ RPC implementation.</li>
<li><a href="http://cppmicroservices.org/" target="_blank" rel="external">C++ Micro Services</a> - An OSGi-like C++ dynamic module system and service registry.</li>
<li><a href="https://github.com/endurox-dev/endurox/" target="_blank" rel="external">Enduro/X</a> - XATMI based service framework for GNU/Linux.</li>
<li><a href="https://github.com/splunk/pion" target="_blank" rel="external">Pion</a> - C++ framework for building lightweight HTTP interfaces.</li>
<li><a href="https://github.com/oktal/pistache" target="_blank" rel="external">Pistache</a> - A high-performance REST toolkit written in C++.</li>
<li><a href="http://pocoproject.org/" target="_blank" rel="external">Poco</a> - C++ class libraries for building network-based applications and servers.</li>
<li><a href="https://github.com/datasift/served" target="_blank" rel="external">Served</a> - C++ library for building high-performance RESTful web servers.</li>
<li><a href="https://github.com/stefanocasazza/ULib" target="_blank" rel="external">ULib</a> - Highly optimized class framework for writing C++ applications.</li>
</ul>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><ul>
<li><a href="http://vibed.org/" target="_blank" rel="external">Vibe.d</a> - Asynchronous I/O that doesn’t get in your way, written in D.</li>
</ul>
<h3 id="Erlang_VM"><a href="#Erlang_VM" class="headerlink" title="Erlang VM"></a>Erlang VM</h3><h4 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h4><ul>
<li><a href="http://www.phoenixframework.org/" target="_blank" rel="external">Phoenix</a> - Framework for building HTML5 apps, API backends and distributed systems.</li>
<li><a href="https://github.com/elixir-lang/plug" target="_blank" rel="external">Plug</a> - A specification and conveniences for composable modules between web applications.</li>
</ul>
<h4 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h4><ul>
<li><a href="https://github.com/ninenines/cowboy" target="_blank" rel="external">Cowboy</a> - Small, fast, modular HTTP server written in Erlang.</li>
<li><a href="https://github.com/videlalvaro/gen_microservice" target="_blank" rel="external">Gen Microservice</a> - This library solves the problem of implementing microservices with Erlang.</li>
<li><a href="https://github.com/mochi/mochiweb" target="_blank" rel="external">Mochiweb</a> - Erlang library for building lightweight HTTP servers.</li>
</ul>
<h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><ul>
<li><a href="https://github.com/sauerbraten/crudapi" target="_blank" rel="external">Crudapi</a> - Go implementation of a RESTful JSON API exposing CRUD functionality relying on a custom storage.</li>
<li><a href="https://echo.labstack.com/" target="_blank" rel="external">Echo</a> - Fast and unfancy HTTP server framework for Go. Up to 10x faster than the rest.</li>
<li><a href="http://gin-gonic.github.io/gin/" target="_blank" rel="external">Gin</a> - Web framework written in Golang.</li>
<li><a href="https://github.com/goadesign/goa" target="_blank" rel="external">Goa</a> - Design-based HTTP microservices in Go.</li>
<li><a href="https://github.com/gocraft/web" target="_blank" rel="external">Gocraft</a> - A toolkit for building web apps. Includes routing, middleware stacks, logging and monitoring.</li>
<li><a href="https://goji.io/" target="_blank" rel="external">Goji</a> - Minimalistic and flexible request multiplexer for Go.</li>
<li><a href="https://github.com/go-kit/kit" target="_blank" rel="external">Go kit</a> - Distributed programming toolkit for microservices in the modern enterprise.</li>
<li><a href="https://github.com/micro/go-micro" target="_blank" rel="external">Go-micro</a> - A pluggable RPC microservice framework.</li>
<li><a href="https://github.com/bndr/gopencils" target="_blank" rel="external">Gopencils</a> - Easily consume REST APIs with Go.</li>
<li><a href="http://www.gorillatoolkit.org/" target="_blank" rel="external">Gorilla</a> - Web toolkit for the Go programming language.</li>
<li><a href="https://github.com/koding/kite" target="_blank" rel="external">Kite</a> - Microservices framework in Go.</li>
<li><a href="https://github.com/docker/libchan" target="_blank" rel="external">Libchan</a> - Ultra-lightweight networking library which lets network services communicate in the same way that goroutines communicate using channels.</li>
<li><a href="https://go-macaron.com/" target="_blank" rel="external">Macaron</a> - Modular web framework in Go.</li>
<li><a href="https://github.com/micro/micro" target="_blank" rel="external">Micro</a> - A microservices toolchain in Go.</li>
<li><a href="https://github.com/codegangsta/negroni" target="_blank" rel="external">Negroni</a> - Idiomatic HTTP middleware for Golang.</li>
<li><a href="https://github.com/neutrinoapp/neutrino" target="_blank" rel="external">Neutrino</a> - Realtime/REST backend service.</li>
<li><a href="https://github.com/smallnest/rpcx" target="_blank" rel="external">RPCX</a> - A distributed RPC service framework based on net/rpc like alibaba Dubbo and weibo Motan.</li>
<li><a href="https://github.com/dougblack/sleepy" target="_blank" rel="external">Sleepy</a> - REST for go.</li>
<li><a href="https://github.com/magneticio/vamp-router" target="_blank" rel="external">Vamp-router</a> - Service routing, load balancing and filtering application.</li>
<li><a href="https://github.com/cosiner/zerver" target="_blank" rel="external">Zerver</a> - RESTful API framework.</li>
</ul>
<h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><ul>
<li><a href="https://github.com/scotty-web/scotty" target="_blank" rel="external">Scotty</a> - Micro web framework inspired by Ruby’s Sinatra, using WAI and Warp.</li>
<li><a href="https://github.com/haskell-servant/servant" target="_blank" rel="external">Servant</a> - Type-level web DSL.</li>
<li><a href="https://github.com/yesodweb/yesod" target="_blank" rel="external">Yesod</a> - The Haskell RESTful web framework.</li>
</ul>
<h3 id="Java_VM"><a href="#Java_VM" class="headerlink" title="Java VM"></a>Java VM</h3><h4 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h4><ul>
<li><a href="https://github.com/weavejester/compojure" target="_blank" rel="external">Compojure</a> - A concise routing library for Ring/Clojure.</li>
<li><a href="https://github.com/weavejester/duct" target="_blank" rel="external">Duct</a> - Minimal framework for building web applications in Clojure, with a strong emphasis on simplicity.</li>
<li><a href="https://github.com/zalando/friboo" target="_blank" rel="external">Friboo</a> - Utility library for writing microservices in Clojure, with support for Swagger and OAuth.</li>
<li><a href="http://clojure-liberator.github.io/liberator/" target="_blank" rel="external">Liberator</a> - Library that helps you expose your data as resources while automatically complying with all the relevant requirements of the HTTP specification.</li>
<li><a href="https://modularity.org/" target="_blank" rel="external">Modularity</a> - JUXT’s Clojure-based modular system.</li>
<li><a href="https://github.com/danielsz/system" target="_blank" rel="external">System</a> - Built on top of Stuart Sierra’s component library, offers a set of readymade components.</li>
<li><a href="https://github.com/otto-de/tesla-microservice" target="_blank" rel="external">Tesla</a> - Common basis for some of Otto.de’s Clojure microservices.</li>
</ul>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul>
<li><a href="https://github.com/airlift/airlift" target="_blank" rel="external">Airlift</a> - Framework for building REST services in Java.</li>
<li><a href="https://github.com/LMAX-Exchange/disruptor" target="_blank" rel="external">Disruptor</a> - A High Performance Inter-Thread Messaging Library.</li>
<li><a href="https://dropwizard.github.io/" target="_blank" rel="external">Dropwizard</a> - Java framework for developing ops-friendly, high-performance, RESTful web services.</li>
<li><a href="https://jersey.java.net/" target="_blank" rel="external">Jersey</a> - RESTful Web Services in Java. JAX-RS (JSR 311 &amp; JSR 339) Reference Implementation.</li>
<li><a href="https://github.com/wso2/msf4j" target="_blank" rel="external">MSF4J</a> - High throughput &amp; low memory footprint Java microservices framework.</li>
<li><a href="https://github.com/advantageous/qbit" target="_blank" rel="external">QBit</a> - Reactive programming library for building microservices.</li>
<li><a href="https://ratpack.io/" target="_blank" rel="external">Ratpack</a> - Set of Java libraries that facilitate fast, efficient, evolvable and well tested HTTP applications. specific support for the Groovy language is provided.</li>
<li><a href="http://restlet.com/" target="_blank" rel="external">Restlet</a> - Helps Java developers build web APIs that follow the REST architecture style.</li>
<li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a> - Makes it easy to create stand-alone, production-grade Spring based applications.</li>
</ul>
<h4 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h4><ul>
<li><a href="http://doc.akka.io/docs/akka/current/scala/http" target="_blank" rel="external">Akka HTTP</a> - Open source toolkit for building REST/HTTP-based integration layers on top of Scala and Akka (will replace Spray).</li>
<li><a href="https://github.com/tumblr/colossus" target="_blank" rel="external">Colossus</a> - I/O and microservice library for Scala.</li>
<li><a href="http://twitter.github.io/finatra/" target="_blank" rel="external">Finatra</a> - Fast, testable, Scala HTTP services built on Twitter-Server and Finagle.</li>
<li><a href="https://www.playframework.com/" target="_blank" rel="external">Play</a> - The high velocity web framework for Java and Scala.</li>
<li><a href="http://www.scalatra.org/" target="_blank" rel="external">Scalatra</a> - Simple, accessible and free web micro-framework.</li>
<li><a href="https://github.com/skinny-framework/skinny-micro" target="_blank" rel="external">Skinny Micro</a> - Micro-web framework to build servlet applications in Scala.</li>
<li><a href="http://spray.io/" target="_blank" rel="external">Spray</a> - Open source toolkit for building REST/HTTP-based integration layers on top of Scala and Akka.</li>
<li><a href="http://paypal.github.io/squbs/" target="_blank" rel="external">Squbs</a> - A suite of components enabling standardization and operationalization of Akka and Spray applications/services in a large scale, managed, cloud environment.</li>
</ul>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul>
<li><a href="http://www.actionherojs.com/" target="_blank" rel="external">Actionhero</a> - Multi-transport Node.js API server with integrated cluster capabilities and delayed tasks.</li>
<li><a href="https://github.com/wprl/baucis" target="_blank" rel="external">Baucis</a> - To build and maintain scalable HATEOAS/Level 3 REST APIs.</li>
<li><a href="http://expressjs.com/" target="_blank" rel="external">Express</a> - Fast, unopinionated, minimalist web framework for Node.js</li>
<li><a href="https://github.com/GraftJS/graft" target="_blank" rel="external">Graft</a> - Full-stack javascript through microservices.</li>
<li><a href="http://hapijs.com/" target="_blank" rel="external">Hapi</a> - A rich framework for building applications and services.</li>
<li><a href="https://github.com/hudson-taylor/hudson-taylor" target="_blank" rel="external">Hudson Taylor</a> - Set of libraries for building automatically documented, well validated services.</li>
<li><a href="http://koajs.com/" target="_blank" rel="external">Koa</a> - Next generation web framework for Node.js</li>
<li><a href="http://loopback.io/" target="_blank" rel="external">Loopback</a> - Node.js framework for creating APIs and easily connecting to backend data sources.</li>
<li><a href="http://github.com/zeithq/micro" target="_blank" rel="external">Micro</a> - Asynchronous HTTP microservices.</li>
<li><a href="https://github.com/czerwonkabartosz/Micro-Whalla" target="_blank" rel="external">Micro-Whalla</a> - A simple, fast framework for writing microservices in Node.js communicate using RPC / IPC.</li>
<li><a href="http://restify.com/" target="_blank" rel="external">Restify</a> - Node.js module built specifically to enable you to build correct REST web services.</li>
<li><a href="http://senecajs.org/" target="_blank" rel="external">Seneca</a> - A microservices toolkit for Node.js</li>
<li><a href="https://github.com/serverless/serverless" target="_blank" rel="external">Serverless</a> - Build and maintain web, mobile and IoT applications running on AWS Lambda and API Gateway (formerly known as JAWS).</li>
</ul>
<h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><ul>
<li><a href="http://mojolicio.us/" target="_blank" rel="external">Mojolicious</a> - Next generation web framework for Perl.</li>
</ul>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul>
<li><a href="https://api-platform.com/" target="_blank" rel="external">API Platform</a> - API-first web framework on top of Symfony with JSON-LD, Schema.org and Hydra support.</li>
<li><a href="https://lumen.laravel.com/" target="_blank" rel="external">Lumen</a> - Stunningly fast micro-framework.</li>
<li><a href="https://phalconphp.com/" target="_blank" rel="external">Phalcon</a> - Full-stack PHP framework delivered as a C-extension.</li>
<li><a href="http://silex.sensiolabs.org/" target="_blank" rel="external">Silex</a> - Micro-framework based on the Symfony components.</li>
<li><a href="http://www.slimframework.com/" target="_blank" rel="external">Slim</a> - Micro-framework that helps you quickly write simple yet powerful web applications and APIs.</li>
</ul>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul>
<li><a href="http://www.celeryproject.org" target="_blank" rel="external">Celery</a> - An asynchronous task queue/job queue based on distributed message passing. Focused on real-time operation and supports scheduling.</li>
<li><a href="http://flask.pocoo.org/" target="_blank" rel="external">Flask</a> - Python framework for microservices based on Werkzeug and Jinja 2.</li>
<li><a href="https://github.com/onefinestay/nameko" target="_blank" rel="external">Nameko</a> - Python framework for building microservices.</li>
<li><a href="http://www.tornadoweb.org/" target="_blank" rel="external">Tornado</a> - Web framework and asynchronous networking library.</li>
<li><a href="https://twistedmatrix.com/trac/" target="_blank" rel="external">Twisted</a> - An Event-Drive Network Programming Engine.</li>
<li><a href="http://webpy.org/" target="_blank" rel="external">web.py</a> - Minimalist web framework for Python.</li>
</ul>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><ul>
<li><a href="https://github.com/hanami" target="_blank" rel="external">Hanami</a> - A modern web framework for Ruby.</li>
<li><a href="https://github.com/rightscale/praxis" target="_blank" rel="external">Praxis</a> - Framework for both designing and implementing APIs.</li>
<li><a href="https://github.com/wardrop/Scorched" target="_blank" rel="external">Scorched</a> - Light-weight web framework for Ruby.</li>
</ul>
<h2 id="Capabilities"><a href="#Capabilities" class="headerlink" title="Capabilities"></a>Capabilities</h2><h3 id="API_Gateways_/_Edge_Services"><a href="#API_Gateways_/_Edge_Services" class="headerlink" title="API Gateways / Edge Services"></a>API Gateways / Edge Services</h3><ul>
<li><a href="http://camel.apache.org/" target="_blank" rel="external">Camel</a> - Empowers you to define routing and mediation rules in a variety of domain-specific languages, including a Java-based fluent API, Spring or Blueprint XML configuration files, and a Scala DSL.</li>
<li><a href="https://github.com/eBay/fabio" target="_blank" rel="external">Fabio</a> - A fast, modern, zero-conf load balancing HTTP/S router for deploying microservices managed by Consul.</li>
<li><a href="http://www.haproxy.org/" target="_blank" rel="external">HAProxy</a> - Reliable, high Performance TCP/HTTP load balancer.</li>
<li><a href="https://getkong.org/" target="_blank" rel="external">Kong</a> - Open source management layer for APIs.</li>
<li><a href="https://github.com/eBay/Neutrino" target="_blank" rel="external">Neutrino</a> - Extensible software load balancer.</li>
<li><a href="http://openresty.org/" target="_blank" rel="external">OpenResty</a> - Fast web application server built on top of Nginx.</li>
<li><a href="https://github.com/zalando/skipper" target="_blank" rel="external">Skipper</a> - HTTP router useful for decoupling routing from service logic.</li>
<li><a href="http://tengine.taobao.org/" target="_blank" rel="external">Tengine</a> - A distribution of Nginx with some advanced features.</li>
<li><a href="http://traefik.io/" target="_blank" rel="external">Træfɪk</a> - A modern HTTP reverse proxy and load balancer made to deploy microservices with ease.</li>
<li><a href="https://tyk.io/" target="_blank" rel="external">Tyk</a> - Open source, fast and scalable API gateway, portal and API management platform.</li>
<li><a href="https://github.com/vulcand/vulcand" target="_blank" rel="external">Vulcand</a> - Programmatic load balancer backed by Etcd.</li>
<li><a href="https://github.com/Netflix/zuul" target="_blank" rel="external">Zuul</a> - An edge service that provides dynamic routing, monitoring, resiliency, security, and more.</li>
</ul>
<h3 id="Configuration_and_Discovery"><a href="#Configuration_and_Discovery" class="headerlink" title="Configuration and Discovery"></a>Configuration and Discovery</h3><ul>
<li><a href="https://www.consul.io/" target="_blank" rel="external">Consul</a> - Service discovery and configuration made easy. Distributed, highly available, and datacenter-aware.</li>
<li><a href="https://github.com/Netflix/denominator" target="_blank" rel="external">Denominator</a> - Portably control DNS clouds using java or bash.</li>
<li><a href="https://github.com/ha/doozerd" target="_blank" rel="external">Doozer</a> - Highly-available, completely consistent store for small amounts of data. When the data changes, it can notify connected clients immediately.</li>
<li><a href="https://github.com/coreos/etcd" target="_blank" rel="external">Etcd</a> - Highly-available key-value store for shared configuration and service discovery.</li>
<li><a href="https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance" target="_blank" rel="external">Eureka</a> - REST based service that is primarily used in the AWS cloud for locating services for the purpose of load balancing and failover of middle-tier servers.</li>
<li><a href="https://github.com/gliderlabs/registrator" target="_blank" rel="external">Registrator</a> - Service registry bridge for Docker. Supports pluggable service registries, which currently includes Consul, etcd and SkyDNS 2.</li>
<li><a href="https://github.com/nanopack/shaman" target="_blank" rel="external">Shaman</a> - Small, lightweight, api-driven DNS server.</li>
<li><a href="https://github.com/skynetservices/skydns" target="_blank" rel="external">SkyDNS</a> - Distributed service for announcement and discovery of services built on top of etcd. It utilizes DNS queries to discover available services.</li>
<li><a href="https://github.com/airbnb/smartstack-cookbook" target="_blank" rel="external">SmartStack</a> - Airbnb’s automated service discovery and registration framework.</li>
<li><a href="http://cloud.spring.io/spring-cloud-config/" target="_blank" rel="external">Spring Cloud Config</a> - Provides server and client-side support for externalized configuration in a distributed system.</li>
<li><a href="https://zookeeper.apache.org/" target="_blank" rel="external">ZooKeeper</a> - Open source server which enables highly reliable distributed coordination.</li>
</ul>
<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><ul>
<li><a href="https://github.com/spotify/crtauth" target="_blank" rel="external">Crtauth</a> - A public key backed client/server authentication system.</li>
<li><a href="https://github.com/coreos/dex" target="_blank" rel="external">Dex</a> - Opinionated auth/directory service with pluggable connectors. OpenID Connect provider and third-party OAuth 2.0 delegation.</li>
<li><a href="http://jwt.io/" target="_blank" rel="external">JWT</a> - JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.</li>
<li><a href="https://github.com/keycloak/keycloak" target="_blank" rel="external">Keycloak</a> - Full-featured and extensible auth service. OpenID Connect provider and third-party OAuth 2.0 delegation.</li>
<li><a href="http://oauth.net/2/" target="_blank" rel="external">OAuth</a> - Provides specific authorization flows for web applications, desktop applications, mobile phones, and living room devices. Many implementations.</li>
<li><a href="http://openid.net/developers/libraries/" target="_blank" rel="external">OpenID Connect</a> - Libraries, products, and tools implementing current OpenID specifications and related specs.</li>
<li><a href="https://github.com/osiam/osiam" target="_blank" rel="external">OSIAM</a> - Open source identity and access management implementing OAuth 2.0 and SCIMv2.</li>
<li><a href="http://www.simplecloud.info/" target="_blank" rel="external">SCIM</a> - System for Cross-domain Identity Management.</li>
<li><a href="https://www.vaultproject.io/" target="_blank" rel="external">Vault</a> - Secures, stores, and tightly controls access to tokens, passwords, certificates, API keys, and other secrets in modern computing.</li>
</ul>
<h3 id="Job_Schedulers_/_Workload_Automation"><a href="#Job_Schedulers_/_Workload_Automation" class="headerlink" title="Job Schedulers / Workload Automation"></a>Job Schedulers / Workload Automation</h3><ul>
<li><a href="https://github.com/mesos/chronos" target="_blank" rel="external">Chronos</a> - Fault tolerant job scheduler for Mesos which handles dependencies and ISO8601 based schedules.</li>
<li><a href="https://github.com/Netflix/Fenzo" target="_blank" rel="external">Fenzo</a> - Extensible scheduler for Mesos frameworks.</li>
<li><a href="http://www.sos-berlin.com/jobscheduler" target="_blank" rel="external">JobScheduler</a> - Open Source solution for enterprise-level workload automation. It is used to launch executable files and shell scripts and to run database procedures automatically.</li>
<li><a href="http://www.openlava.org/" target="_blank" rel="external">OpenLava</a> - Workload scheduler that supports a variety of HPC and analytic applications.</li>
<li><a href="http://rundeck.org/" target="_blank" rel="external">Rundec</a> - Job scheduler and runbook automation. Enable self-service access to existing scripts and tools.</li>
<li><a href="http://www.schedulix.org/en" target="_blank" rel="external">Schedulix</a> - Open source enterprise job scheduling system lays down ground-breaking standards for the professional automation of IT processes in advanced system environments.</li>
</ul>
<h3 id="Elasticity"><a href="#Elasticity" class="headerlink" title="Elasticity"></a>Elasticity</h3><ul>
<li><a href="http://www.paralleluniverse.co/galaxy/" target="_blank" rel="external">Galaxy</a> - Open source high-performance in-memory data-grid.</li>
<li><a href="http://reverbrain.com/grape/" target="_blank" rel="external">Grape</a> - Realtime processing pipeline.</li>
<li><a href="http://hazelcast.org/" target="_blank" rel="external">Hazelcast</a> - Open source in-memory data-grid. Allows you to distribute data and computation across servers, clusters and geographies, and to manage very large data sets or high data ingest rates. Mature technology.</li>
<li><a href="http://helix.apache.org/" target="_blank" rel="external">Helix</a> - Generic cluster management framework used for the automatic management of partitioned, replicated and distributed resources hosted on a cluster of nodes.</li>
<li><a href="http://ignite.apache.org/" target="_blank" rel="external">Ignite</a> - High-performance, integrated and distributed in-memory platform for computing and transacting on large-scale data sets in real-time, orders of magnitude faster than possible with traditional disk-based or flash technologies.</li>
<li><a href="https://mesosphere.github.io/marathon/" target="_blank" rel="external">Marathon</a> - Deploy and manage containers (including Docker) on top of Apache Mesos at scale.</li>
<li><a href="https://mesos.apache.org/" target="_blank" rel="external">Mesos</a> - Abstracts CPU, memory, storage, and other compute resources away from machines (physical or virtual), enabling fault-tolerant and elastic distributed systems to easily be built and run effectively.</li>
<li><a href="https://www.nomadproject.io/" target="_blank" rel="external">Nomad</a> - Distributed, highly available, datacenter-aware scheduler.</li>
<li><a href="https://github.com/onyx-platform/onyx" target="_blank" rel="external">Onyx</a> - Distributed, masterless, high performance, fault tolerant data processing for Clojure.</li>
<li><a href="https://github.com/boundary/ordasity" target="_blank" rel="external">Ordasity</a> - Designed to spread persistent or long-lived workloads across several machines.</li>
<li><a href="https://github.com/mrniko/redisson" target="_blank" rel="external">Redisson</a> - Distributed and scalable Java data structures on top of Redis server.</li>
<li><a href="https://www.serfdom.io/" target="_blank" rel="external">Serf</a> - Decentralized solution for cluster membership, failure detection and orchestration.</li>
</ul>
<h3 id="Messaging"><a href="#Messaging" class="headerlink" title="Messaging"></a>Messaging</h3><ul>
<li><a href="http://zeromq.org/" target="_blank" rel="external">ØMQ</a> - Brokerless intelligent transport layer.</li>
<li><a href="http://activemq.apache.org/" target="_blank" rel="external">ActiveMQ</a> - Powerful open source messaging and integration patterns server.</li>
<li><a href="https://github.com/real-logic/Aeron" target="_blank" rel="external">Aeron</a> - Efficient reliable UDP unicast, UDP multicast, and IPC message transport.</li>
<li><a href="http://activemq.apache.org/apollo/" target="_blank" rel="external">Apollo</a> - Faster, more reliable, easier to maintain messaging broker built from the foundations of the original ActiveMQ.</li>
<li><a href="https://github.com/mcollina/ascoltatori" target="_blank" rel="external">Ascoltatori</a> - Pub/sub library for Node.</li>
<li><a href="http://kr.github.io/beanstalkd/" target="_blank" rel="external">Beanstalk</a> - Simple, fast work queue.</li>
<li><a href="https://github.com/antirez/disque" target="_blank" rel="external">Disque</a> - Distributed message broker.</li>
<li><a href="http://kafka.apache.org/" target="_blank" rel="external">Kafka</a> - Publish-subscribe messaging rethought as a distributed commit log.</li>
<li><a href="https://github.com/zeromq/malamute" target="_blank" rel="external">Malamute</a> - ZeroMQ enterprise messaging broker.</li>
<li><a href="https://github.com/nanopack/mist" target="_blank" rel="external">Mist</a> - A distributed, tag-based pub/sub service.</li>
<li><a href="http://www.mosca.io/" target="_blank" rel="external">Mosca</a> - MQTT broker as a module.</li>
<li><a href="http://mosquitto.org/" target="_blank" rel="external">Mosquitto</a> - Open source message broker that implements the MQTT protocol.</li>
<li><a href="http://nanomsg.org/" target="_blank" rel="external">Nanomsg</a> - Socket library that provides several common communication patterns for building distributed systems.</li>
<li><a href="https://nats.io/" target="_blank" rel="external">NATS</a> - Open source, high-performance, lightweight cloud messaging system.</li>
<li><a href="http://nsq.io/" target="_blank" rel="external">NSQ</a> - A realtime distributed messaging platform.</li>
<li><a href="https://qpid.apache.org/" target="_blank" rel="external">Qpid</a> - Cross-platform messaging components built on AMQP.</li>
<li><a href="https://www.rabbitmq.com/" target="_blank" rel="external">RabbitMQ</a> - Open source Erlang-based message broker that just works.</li>
<li><a href="https://verne.mq" target="_blank" rel="external">VerneMQ</a> - Open source, scalable, Erlang-based MQTT broker.</li>
</ul>
<h3 id="Serialization"><a href="#Serialization" class="headerlink" title="Serialization"></a>Serialization</h3><ul>
<li><a href="https://avro.apache.org/" target="_blank" rel="external">Avro</a> - Apache data serialization system providing rich data structures in a compact, fast, binary data format.</li>
<li><a href="https://github.com/ochrons/boopickle" target="_blank" rel="external">BooPickle</a> - Binary serialization library for efficient network communication. For Scala and Scala.js</li>
<li><a href="https://capnproto.org/" target="_blank" rel="external">Cap’n Proto</a> - Insanely fast data interchange format and capability-based RPC system.</li>
<li><a href="http://cbor.io/" target="_blank" rel="external">CBOR</a> - Implementations of the CBOR standard (RFC 7049) in many languages.</li>
<li><a href="http://uscilab.github.io/cereal/" target="_blank" rel="external">Cereal</a> - C++11 library for serialization.</li>
<li><a href="https://github.com/dakrone/cheshire" target="_blank" rel="external">Cheshire</a> - Clojure JSON and JSON SMILE encoding/decoding.</li>
<li><a href="http://etch.apache.org/" target="_blank" rel="external">Etch</a> - Cross-platform, language and transport-independent framework for building and consuming network services.</li>
<li><a href="https://github.com/alibaba/fastjson" target="_blank" rel="external">Fastjson</a> - Fast JSON Processor.</li>
<li><a href="https://github.com/pquerna/ffjson" target="_blank" rel="external">Ffjson</a> - Faster JSON serialization for Go.</li>
<li><a href="https://github.com/RuedigerMoeller/fast-serialization" target="_blank" rel="external">FST</a> - Fast java serialization drop in-replacemen.</li>
<li><a href="https://github.com/FasterXML/jackson" target="_blank" rel="external">Jackson</a> -  A multi-purpose Java library for processing JSON data format.</li>
<li><a href="https://github.com/FasterXML/jackson-module-afterburner" target="_blank" rel="external">Jackson Afterburner</a> - Jackson module that uses bytecode generation to further speed up data binding (+30-40% throughput for serialization, deserialization).</li>
<li><a href="https://github.com/EsotericSoftware/kryo" target="_blank" rel="external">Kryo</a> - Java serialization and cloning: fast, efficient, automatic.</li>
<li><a href="http://msgpack.org/" target="_blank" rel="external">MessagePack</a> - Efficient binary serialization format.</li>
<li><a href="http://www.protostuff.io/" target="_blank" rel="external">Protostuff</a> - A serialization library with built-in support for forward-backward compatibility (schema evolution) and validation.</li>
<li><a href="https://github.com/harrah/sbinary" target="_blank" rel="external">SBinary</a> - Library for describing binary formats for Scala types.</li>
<li><a href="http://thrift.apache.org/" target="_blank" rel="external">Thrift</a> - The Apache Thrift software framework, for scalable cross-language services development.</li>
</ul>
<h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><ul>
<li><a href="http://www.aerospike.com/" target="_blank" rel="external">Aerospike</a> - High performance NoSQL database delivering speed at scale.</li>
<li><a href="https://www.arangodb.com/" target="_blank" rel="external">ArangoDB</a> - A distributed free and open source database with a flexible data model for documents, graphs, and key-values.</li>
<li><a href="https://clickhouse.yandex/" target="_blank" rel="external">ClickHouse</a> - Column-oriented database management system that allows generating analytical data reports in real time.</li>
<li><a href="http://www.couchbase.com/" target="_blank" rel="external">Couchbase</a> - A distributed database engineered for performance, scalability, and simplified administration.</li>
<li><a href="https://crate.io/" target="_blank" rel="external">Crate</a> - Scalable SQL database with the NoSQL goodies.</li>
<li><a href="http://www.datomic.com/" target="_blank" rel="external">Datomic</a> - Fully transactional, cloud-ready, distributed database.</li>
<li><a href="http://druid.io/" target="_blank" rel="external">Druid</a> - Fast column-oriented distributed data store.</li>
<li><a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="external">Elasticsearch</a> - Open source distributed, scalable, and highly available search server.</li>
<li><a href="http://reverbrain.com/elliptics/" target="_blank" rel="external">Elliptics</a> - Fault tolerant distributed key/value storage.</li>
<li><a href="http://geode.incubator.apache.org/" target="_blank" rel="external">Geode</a> - Open source, distributed, in-memory database for scale-out applications.</li>
<li><a href="http://www.memsql.com/" target="_blank" rel="external">MemSQL</a> - High-performance, in-memory database that combines the horizontal scalability of distributed systems with the familiarity of SQL.</li>
<li><a href="https://parquet.apache.org/" target="_blank" rel="external">Parquet</a> - Columnar storage format available to any project in the Hadoop ecosystem, regardless of the choice of data processing framework, data model or programming language.</li>
<li><a href="https://github.com/reborndb/reborn" target="_blank" rel="external">Reborn</a> - Distributed database fully compatible with redis protocol.</li>
<li><a href="http://rethinkdb.com/" target="_blank" rel="external">RethinkDB</a> - Open source, scalable database that makes building realtime apps easier.</li>
<li><a href="https://github.com/ssbc/docs" target="_blank" rel="external">Secure Scuttlebutt</a> - P2P database of message-feeds.</li>
<li><a href="http://tachyon-project.org/" target="_blank" rel="external">Tachyon</a> - Memory-centric distributed storage system, enabling reliable data sharing at memory-speed across cluster frameworks.</li>
</ul>
<h3 id="Reactivity"><a href="#Reactivity" class="headerlink" title="Reactivity"></a>Reactivity</h3><ul>
<li><a href="http://projectreactor.io" target="_blank" rel="external">Reactor.io</a> - A second-generation Reactive library for building non-blocking applications on<br>the JVM based on the Reactive Streams Specification.</li>
<li><a href="https://github.com/softwaremill/reactive-kafka" target="_blank" rel="external">Reactive Kafka</a> - Reactive Streams API for Apache Kafka.</li>
<li><a href="http://reactivex.io/" target="_blank" rel="external">ReactiveX</a> - API for asynchronous programming with observable streams. Available for idiomatic Java, Scala, C#, C++, Clojure, JavaScript, Python, Groovy, JRuby, and others.</li>
<li><a href="https://github.com/aol/simple-react" target="_blank" rel="external">Simple React</a> - Powerful future streams &amp; asynchronous data structures for Java 8.</li>
</ul>
<h3 id="Resilience"><a href="#Resilience" class="headerlink" title="Resilience"></a>Resilience</h3><ul>
<li><a href="https://github.com/Netflix/Hystrix" target="_blank" rel="external">Hystrix</a> - Latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable.</li>
<li><a href="http://pathod.net/" target="_blank" rel="external">Pathod</a> - Crafted malice for tormenting HTTP clients and servers.</li>
<li><a href="http://raftconsensus.github.io/" target="_blank" rel="external">Raft Consensus</a> - Consensus algorithm that is designed to be easy to understand. It’s equivalent to Paxos in fault-tolerance and performance.</li>
<li><a href="http://resilient-http.github.io/" target="_blank" rel="external">Resilient HTTP</a> - A smart HTTP client with super powers like fault tolerance, dynamic server discovery, auto balancing and reactive recovery, designed for distributed systems.</li>
<li><a href="https://github.com/tomakehurst/saboteur" target="_blank" rel="external">Saboteur</a> - Causing deliberate network mayhem for better resilience.</li>
<li><a href="https://github.com/Netflix/SimianArmy" target="_blank" rel="external">Simian Army</a> - Suite of tools for keeping your cloud operating in top form. Chaos Monkey, the first member, is a resiliency tool that helps ensure that your applications can tolerate random instance failures.</li>
</ul>
<h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><ul>
<li><a href="https://mitmproxy.org/" target="_blank" rel="external">Mitmproxy</a> - An interactive console program that allows traffic flows to be intercepted, inspected, modified and replayed.</li>
<li><a href="http://www.mbtest.org/" target="_blank" rel="external">Mountebank</a> - Cross-platform, multi-protocol test doubles over the wire.</li>
<li><a href="https://github.com/vcr/vcr" target="_blank" rel="external">VCR</a> - Record your test suite’s HTTP interactions and replay them during future test runs for fast, deterministic, accurate tests. See the list of ports for implementations in other languages.</li>
<li><a href="https://github.com/epam/Wilma" target="_blank" rel="external">Wilma</a> - Combined HTTP/HTTPS service stub and transparent proxy solution.</li>
<li><a href="http://wiremock.org/" target="_blank" rel="external">WireMock</a> - Flexible library for stubbing and mocking web services. Unlike general purpose mocking tools it works by creating an actual HTTP server that your code under test can connect to as it would a real web service.</li>
</ul>
<h3 id="Monitoring_and_Debugging"><a href="#Monitoring_and_Debugging" class="headerlink" title="Monitoring and Debugging"></a>Monitoring and Debugging</h3><ul>
<li><a href="https://www.elastic.co/products/beats" target="_blank" rel="external">Beats</a> - Lightweight shippers for Elasticsearch &amp; Logstash.</li>
<li><a href="https://collectd.org/" target="_blank" rel="external">Collectd</a> - The system statistics collection daemon.</li>
<li><a href="https://github.com/yelp/elastalert" target="_blank" rel="external">Elastalert</a> - Easy &amp; flexible alerting for Elasticsearch.</li>
<li><a href="http://ganglia.info/" target="_blank" rel="external">Ganglia</a> - A scalable distributed monitoring system for high-performance computing systems such as clusters and grids.</li>
<li><a href="http://grafana.org/" target="_blank" rel="external">Grafana</a> - An open source, feature rich metrics dashboard and graph editor for<br>Graphite, InfluxDB &amp; OpenTSDB.</li>
<li><a href="http://graphite.wikidot.com/" target="_blank" rel="external">Graphite</a> - Scalable realtime graphing.</li>
<li><a href="https://github.com/eBay/parallec" target="_blank" rel="external">Parallec</a> - Fast parallel asynchronous HTTP/SSH/TCP/Ping client Java library.</li>
<li><a href="http://prometheus.io/" target="_blank" rel="external">Prometheus</a> - An open source service monitoring system and time series database.</li>
<li><a href="https://github.com/eBay/restcommander" target="_blank" rel="external">REST Commander</a> - Fast parallel asynchronous HTTP client as a service to monitor and manage HTTP endpoints.</li>
<li><a href="http://riemann.io/" target="_blank" rel="external">Riemann</a> - Monitors distributed systems.</li>
<li><a href="https://github.com/sensu" target="_blank" rel="external">Sensu</a> - Monitoring for today’s infrastructure.</li>
<li><a href="https://github.com/RisingStack/trace-nodejs" target="_blank" rel="external">Trace</a> - A visualised stack trace platform designed for microservices.</li>
<li><a href="https://www.elastic.co/products/watcher" target="_blank" rel="external">Watcher</a> - Alerting for Elasticsearch.</li>
<li><a href="http://www.zabbix.com/" target="_blank" rel="external">Zabbix</a> - Open source enterprise-class monitoring solution.</li>
</ul>
<h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><ul>
<li><a href="http://www.fluentd.org/" target="_blank" rel="external">Fluentd</a> - Open source data collector for unified logging layer.</li>
<li><a href="https://www.graylog.org/" target="_blank" rel="external">Graylog</a> - Fully integrated open source log management platform.</li>
<li><a href="https://www.elastic.co/products/kibana" target="_blank" rel="external">Kibana</a> - Flexible analytics and visualization platform.</li>
<li><a href="https://www.elastic.co/products/logstash" target="_blank" rel="external">Logstash</a> - Tool for managing events and logs.</li>
<li><a href="https://github.com/Netflix/suro/wiki" target="_blank" rel="external">Suro</a> - Distributed data pipeline which enables services for moving, aggregating, routing, storing data.</li>
</ul>
<h2 id="IT_Automation_/_Provisioning"><a href="#IT_Automation_/_Provisioning" class="headerlink" title="IT Automation / Provisioning"></a>IT Automation / Provisioning</h2><ul>
<li><a href="http://www.ansible.com/" target="_blank" rel="external">Ansible</a> - Radically simple IT automation platform that makes your applications and systems easier to deploy.</li>
<li><a href="https://www.chef.io/chef/" target="_blank" rel="external">Chef</a> - Automate how you build, deploy, and manage your infrastructure.</li>
<li><a href="https://github.com/spotify/helios" target="_blank" rel="external">Helios</a> - Docker container orchestration platform.</li>
<li><a href="https://www.packer.io/" target="_blank" rel="external">Packer</a> - Tool for creating identical machine images for multiple platforms from a single source configuration.</li>
<li><a href="https://puppetlabs.com/" target="_blank" rel="external">Puppet</a> - From provisioning bare metal &amp; launching containers to new ways to manage infrastructure as code.</li>
<li><a href="https://github.com/saltstack/salt" target="_blank" rel="external">Salt</a> - Infrastructure automation and management system.</li>
<li><a href="https://www.terraform.io/" target="_blank" rel="external">Terraform</a> - Provides a common configuration to launch infrastructure, from physical and virtual servers to email and DNS providers.</li>
</ul>
<h2 id="Deployment_and_Continuous_Integration"><a href="#Deployment_and_Continuous_Integration" class="headerlink" title="Deployment and Continuous Integration"></a>Deployment and Continuous Integration</h2><h3 id="On-prem"><a href="#On-prem" class="headerlink" title="On-prem"></a>On-prem</h3><ul>
<li><a href="https://buddy.works/buddy-go" target="_blank" rel="external">Buddy Go</a> - The On-Premises Git and Continuous Integration Platform</li>
<li><a href="https://github.com/drone/drone" target="_blank" rel="external">Drone</a> - Drone is a continuous delivery platform built on Docker, written in Go.</li>
<li><a href="https://github.com/gilt/ionroller" target="_blank" rel="external">ION-Roller</a> - AWS immutable deployment framework for web services.</li>
<li><a href="https://github.com/github/janky" target="_blank" rel="external">Janky</a> - Continuous integration server built on top of Jenkins and Hubot.</li>
<li><a href="http://jenkins-ci.org/" target="_blank" rel="external">Jenkins</a> - Extensible open source continuous integration server.</li>
<li><a href="https://github.com/nearform/nscale" target="_blank" rel="external">Nscale</a> - Open toolkit supporting configuration, build and deployment of connected container sets.</li>
<li><a href="https://github.com/DatawiseIO/Project6" target="_blank" rel="external">Project 6</a> - Software for deploying and managing Docker containers across a cluster of hosts, with a focus on simplifying network and storage configurations for on-premises environments.</li>
<li><a href="https://github.com/crufter/puller" target="_blank" rel="external">Puller</a> - A very simple, distributed tool to deploy and do CI with Docker containers.</li>
<li><a href="https://github.com/rancher/rancher" target="_blank" rel="external">Rancher</a> - Open source platform for operating Docker in production.</li>
</ul>
<h3 id="Hosted"><a href="#Hosted" class="headerlink" title="Hosted"></a>Hosted</h3><ul>
<li><a href="http://aws.amazon.com/codedeploy/" target="_blank" rel="external">AWS CodeDeploy</a> - Deployment service that enables developers to automate the deployment of applications to instances and to update the applications as required.</li>
<li><a href="http://aws.amazon.com/opsworks/" target="_blank" rel="external">AWS OpsWorks</a> - Provides a simple and flexible way to create and manage stacks and applications.</li>
<li><a href="https://buddy.works/" target="_blank" rel="external">Buddy</a> - The Git and Continuous Delivery Platform.</li>
<li><a href="https://codeship.com/" target="_blank" rel="external">Codeship</a> - Hosted continuous delivery platform that takes care<br>of the testing and deployment process.</li>
<li><a href="https://travis-ci.org/" target="_blank" rel="external">Travis</a> - Continuous integration and deployment service.</li>
</ul>
<h3 id="Lightweight"><a href="#Lightweight" class="headerlink" title="Lightweight"></a>Lightweight</h3><ul>
<li><a href="https://github.com/puniverse/capsule" target="_blank" rel="external">Capsule</a> - Packaging and deployment tool for JVM applications.</li>
<li><a href="https://github.com/nathanmarz/kafka-deploy" target="_blank" rel="external">Kafka Deploy</a> - Automated deploy for a Kafka cluster on AWS.</li>
<li><a href="https://github.com/flosell/lambdacd" target="_blank" rel="external">LambdaCD</a> - A library to define a continuous delivery pipeline in code.</li>
</ul>
<h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><ul>
<li><a href="http://aws.amazon.com/ecs/" target="_blank" rel="external">AWS ECS</a> - Easily run and manage Docker-enabled applications across a cluster of Amazon EC2 instances.</li>
<li><a href="https://coreos.com/" target="_blank" rel="external">CoreOS</a> - Open source lightweight operating system based on the Linux kernel and designed for providing infrastructure to clustered deployments.</li>
<li><a href="https://dcos.io/" target="_blank" rel="external">DC/OS</a> - Open source orchestration system (built on top of Mesos and Marathon) for automatically distributing and running containers on several computers.</li>
<li><a href="https://www.docker.com/" target="_blank" rel="external">Docker</a> - Open platform for distributed applications for developers and sysadmins.</li>
<li><a href="http://kubernetes.io/" target="_blank" rel="external">Kubernetes</a> - Open source orchestration system for Docker containers.</li>
<li><a href="https://linuxcontainers.org/" target="_blank" rel="external">Linux Containers</a> - The umbrella project behind LXC, LXD, LXCFS and CGManager.</li>
<li><a href="https://github.com/rancher/os" target="_blank" rel="external">RancherOS</a> - The smallest, easiest way to run Docker in production at scale.</li>
</ul>
<h2 id="Documentation__26amp_3B_Modeling"><a href="#Documentation__26amp_3B_Modeling" class="headerlink" title="Documentation &amp; Modeling"></a>Documentation &amp; Modeling</h2><h3 id="REST_APIs"><a href="#REST_APIs" class="headerlink" title="REST APIs"></a>REST APIs</h3><ul>
<li><a href="https://github.com/danielgtaylor/aglio" target="_blank" rel="external">Aglio</a> - API Blueprint renderer with theme support that outputs static HTML.</li>
<li><a href="https://apiblueprint.org/" target="_blank" rel="external">API Blueprint</a> - Tools for your whole API lifecycle. Use it to discuss your API with others. Generate documentation automatically. Or a test suite. Or even some code.</li>
<li><a href="https://github.com/mbryzek/apidoc" target="_blank" rel="external">Apidoc</a> - Beautiful documentation for REST services.</li>
<li><a href="http://raml.org/" target="_blank" rel="external">RAML</a> - RESTful API Modeling Language, a simple and succinct way of describing practically-RESTful APIs.</li>
<li><a href="https://github.com/tripit/slate" target="_blank" rel="external">Slate</a> - Beautiful static documentation for your API.</li>
<li><a href="http://projects.spring.io/spring-restdocs/" target="_blank" rel="external">Spring REST Docs</a> - Document RESTful services by combining hand-written documentation with auto-generated snippets produced with Spring MVC Test.</li>
<li><a href="http://swagger.io/" target="_blank" rel="external">Swagger</a> - A simple yet powerful representation of your RESTful API.</li>
</ul>
<h2 id="Standards_/_Recommendations"><a href="#Standards_/_Recommendations" class="headerlink" title="Standards / Recommendations"></a>Standards / Recommendations</h2><h3 id="World_Wide_Web"><a href="#World_Wide_Web" class="headerlink" title="World Wide Web"></a>World Wide Web</h3><ul>
<li><a href="http://www.w3.org/TR/webarch/" target="_blank" rel="external">W3C.REC-Webarch</a> - Architecture of the World Wide Web, Volume One.</li>
<li><a href="https://tools.ietf.org/html/rfc3986" target="_blank" rel="external">RFC3986</a> - Uniform Resource Identifier (URI): Generic Syntax.</li>
<li><a href="https://tools.ietf.org/html/rfc6570" target="_blank" rel="external">RFC6570</a> - URI Template.</li>
<li><a href="https://tools.ietf.org/html/rfc7320" target="_blank" rel="external">RFC7320</a> - URI Design and Ownership.</li>
</ul>
<h3 id="HTTP/1-1"><a href="#HTTP/1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><ul>
<li><a href="https://tools.ietf.org/html/rfc7230" target="_blank" rel="external">RFC7230</a> - Message Syntax and Routing.</li>
<li><a href="https://tools.ietf.org/html/rfc7231" target="_blank" rel="external">RFC7231</a> - Semantics and Content.</li>
<li><a href="https://tools.ietf.org/html/rfc7232" target="_blank" rel="external">RFC7232</a> - Conditional Requests.</li>
<li><a href="https://tools.ietf.org/html/rfc7233" target="_blank" rel="external">RFC7233</a> - Range Requests.</li>
<li><a href="https://tools.ietf.org/html/rfc7234" target="_blank" rel="external">RFC7234</a> - Caching.</li>
<li><a href="https://tools.ietf.org/html/rfc7235" target="_blank" rel="external">RFC7235</a> - Authentication.</li>
</ul>
<h3 id="HTTP/2"><a href="#HTTP/2" class="headerlink" title="HTTP/2"></a>HTTP/2</h3><ul>
<li><a href="https://tools.ietf.org/html/rfc7540" target="_blank" rel="external">RFC7540</a> - Hypertext Transfer Protocol Version 2.</li>
</ul>
<h3 id="CoAP"><a href="#CoAP" class="headerlink" title="CoAP"></a>CoAP</h3><ul>
<li><a href="http://coap.technology/spec.html" target="_blank" rel="external">RFC7252</a> - The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained networks in the Internet of Things.</li>
</ul>
<h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><ul>
<li><a href="http://bert-rpc.org/" target="_blank" rel="external">BERT-RPC 1.0</a> - An attempt to specify a flexible binary serialization and RPC protocol that are compatible with the philosophies of dynamic languages.</li>
<li><a href="http://www.jsonrpc.org/specification" target="_blank" rel="external">JSON-RPC 2.0</a> - A stateless, light-weight remote procedure call (RPC) protocol.</li>
</ul>
<h3 id="Messaging-1"><a href="#Messaging-1" class="headerlink" title="Messaging"></a>Messaging</h3><ul>
<li><a href="http://www.amqp.org/" target="_blank" rel="external">AMQP</a> - Advanced Message Queuing Protocol.</li>
<li><a href="http://mqtt.org/" target="_blank" rel="external">MQTT</a> - MQ Telemetry Transport.</li>
<li><a href="https://stomp.github.io/" target="_blank" rel="external">STOMP</a> - Simple Text Oriented Messaging Protocol.</li>
</ul>
<h3 id="Security-1"><a href="#Security-1" class="headerlink" title="Security"></a>Security</h3><ul>
<li><a href="https://tools.ietf.org/html/rfc5246" target="_blank" rel="external">RFC5246</a> - The Transport Layer Security (TLS) Protocol Version 1.2.</li>
<li><a href="https://tools.ietf.org/html/rfc6066" target="_blank" rel="external">RFC6066</a> - TLS Extensions.</li>
<li><a href="https://tools.ietf.org/html/rfc6347" target="_blank" rel="external">RFC6347</a> - Datagram Transport Layer Security Version 1.2.</li>
<li><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="external">RFC6749</a> - The OAuth 2.0 authorization framework.</li>
<li><a href="https://tools.ietf.org/html/rfc7515" target="_blank" rel="external">RFC7515</a> - JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.</li>
<li><a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="external">RFC7519</a> - JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.</li>
<li><a href="https://tools.ietf.org/html/rfc7642" target="_blank" rel="external">RFC7642</a> - SCIM: Definitions, overview, concepts, and requirements.</li>
<li><a href="https://tools.ietf.org/html/rfc7643" target="_blank" rel="external">RFC7643</a> - SCIM: Core Schema, provides a platform-neutral schema and extension model for representing users and groups.</li>
<li><a href="https://tools.ietf.org/html/rfc7644" target="_blank" rel="external">RFC7644</a> - SCIM: Protocol, an application-level, REST protocol for provisioning and managing identity data on the web.</li>
<li><a href="http://openid.net/connect/" target="_blank" rel="external">OIDCONN</a> - OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0 protocol. It allows clients to verify the identity of the end-user based on the authentication performed by an Authorization Server, as well as to obtain basic profile information about the end-user in an interoperable and REST-like manner.</li>
</ul>
<h3 id="Service_Discovery"><a href="#Service_Discovery" class="headerlink" title="Service Discovery"></a>Service Discovery</h3><ul>
<li><a href="https://tools.ietf.org/html/draft-kelly-json-hal-07" target="_blank" rel="external">HAL-DRAFT</a> - The JSON Hypertext Application Language (HAL) is a standard which establishes conventions for expressing hypermedia controls, such as links, with JSON. <sup>DRAFT</sup></li>
<li><a href="http://www.hydra-cg.com/" target="_blank" rel="external">Hydra</a> - Specifications for interoperable, hypermedia-driven Web APIs.</li>
<li><a href="http://www.w3.org/Submission/wadl/" target="_blank" rel="external">WADL</a> - The Web Application Description Language specification.</li>
<li><a href="http://www.w3.org/TR/wsdl20/" target="_blank" rel="external">WSDL</a> - The Web Services Description Language Version 2.0 spec.</li>
</ul>
<h3 id="Data_Formats"><a href="#Data_Formats" class="headerlink" title="Data Formats"></a>Data Formats</h3><ul>
<li><a href="https://tools.ietf.org/html/rfc4627" target="_blank" rel="external">RFC4627</a> - JavaScript Object Notation (JSON).</li>
<li><a href="http://tools.ietf.org/search/rfc7049" target="_blank" rel="external">RFC7049</a> - Concise Binary Object Representation (CBOR).</li>
<li><a href="http://bsonspec.org/" target="_blank" rel="external">BSON</a> - Binary JSON (BSON).</li>
<li><a href="http://json-ld.org/" target="_blank" rel="external">JSON-LD</a> - JSON for Linking Data.</li>
<li><a href="https://github.com/FIXTradingCommunity/fix-simple-binary-encoding" target="_blank" rel="external">SBE</a> - Simple Binary Encoding (SBE).</li>
<li><a href="https://github.com/msgpack/msgpack/blob/master/spec.md" target="_blank" rel="external">MSGPACK</a> - MessagePack Specification.</li>
<li><a href="http://ubjson.org/" target="_blank" rel="external">UBJSON</a> - Universal Binary JSON Specification.</li>
</ul>
<h3 id="Vocabularies"><a href="#Vocabularies" class="headerlink" title="Vocabularies"></a>Vocabularies</h3><ul>
<li><a href="http://lov.okfn.org/" target="_blank" rel="external">LOV</a> - Linked open vocabularies.</li>
<li><a href="http://schema.org/" target="_blank" rel="external">Schema.org</a> - Collaborative, community activity with a mission to create, maintain, and promote schemas for structured data on the Internet, on web pages, in email messages, and beyond.</li>
</ul>
<h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><ul>
<li><a href="http://www.unicode.org/versions/Unicode8.0.0/" target="_blank" rel="external">UNIV8</a> - The Unicode Consortium. The Unicode Standard, Version 8.0.0, (Mountain View, CA: The Unicode Consortium, 2015. ISBN 978-1-936213-10-8).</li>
<li><a href="https://tools.ietf.org/html/rfc3629" target="_blank" rel="external">RFC3629</a> - UTF-8, a transformation format of ISO 10646.</li>
</ul>
<h2 id="Real_Life_Stories"><a href="#Real_Life_Stories" class="headerlink" title="Real Life Stories"></a>Real Life Stories</h2><ul>
<li><a href="http://blog.cleancoder.com/uncle-bob/2014/10/01/CleanMicroserviceArchitecture.html" target="_blank" rel="external">Clean microservice architecture</a></li>
<li><a href="https://rclayton.silvrback.com/failing-at-microservices" target="_blank" rel="external">Failing at microservices</a></li>
<li><a href="https://blog.pivotal.io/labs/labs/how-to-talk-to-your-friends-about-microservices" target="_blank" rel="external">How to talk to your friends about microservices</a></li>
<li><a href="https://blog.yourkarma.com/building-microservices-at-karma" target="_blank" rel="external">How we build microservices at Karma</a></li>
<li><a href="http://philcalcado.com/2015/09/08/how_we_ended_up_with_microservices.html" target="_blank" rel="external">How we ended up with microservices at SoundCloud</a></li>
<li><a href="https://www.thoughtworks.com/insights/blog/microservices-lessons-frontline" target="_blank" rel="external">Microservices: lessons from the frontline</a></li>
<li><a href="http://martinfowler.com/bliki/MonolithFirst.html" target="_blank" rel="external">Monolith first</a></li>
<li><a href="http://www.infoq.com/news/2015/04/scaling-microservices-gilt" target="_blank" rel="external">Scaling microservices at Gilt with Scala, Docker and AWS</a></li>
</ul>
<h2 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h2><h3 id="Articles__26amp_3B_Papers"><a href="#Articles__26amp_3B_Papers" class="headerlink" title="Articles &amp; Papers"></a>Articles &amp; Papers</h3><ul>
<li><a href="http://akfpartners.com/techblog/2008/05/08/splitting-applications-or-services-for-scale/" target="_blank" rel="external">AKF Scale Cube</a> - Model depicting the dimensions to scale a service.</li>
<li><a href="http://db.cs.berkeley.edu/papers/cidr11-bloom.pdf" target="_blank" rel="external">CALM</a> - Consistency as logical monotonicity. :small_orange_diamond:<sup>PDF</sup></li>
<li><a href="http://martinfowler.com/bliki/CanaryRelease.html" target="_blank" rel="external">Canary Release</a> - Technique to reduce the risk of introducing a new software version in production by slowly rolling out the change to a small subset of users before rolling it out to the entire infrastructure and making it available to everybody.</li>
<li><a href="http://blog.thislongrun.com/2015/03/the-cap-theorem-series.html" target="_blank" rel="external">CAP Theorem</a> -  States that it is impossible for a distributed computer system to simultaneously provide all three of the following guarantees: Consistency, Availability and Partition tolerance.</li>
<li><a href="https://msdn.microsoft.com/en-us/library/dn600223.aspx" target="_blank" rel="external">Cloud Design Patterns</a> - Contains twenty-four design patterns that are useful in cloud-hosted applications. Includes: Circuit Breaker, Competing Consumers, CQRS, Event Sourcing, Gatekeeper, Cache-Aside, etc.</li>
<li><a href="http://alistair.cockburn.us/Hexagonal+architecture" target="_blank" rel="external">Hexagonal Architecture</a> - Allows an application to equally be driven by users, programs, automated test or batch scripts, and to be developed and tested in isolation from its eventual run-time devices and databases.</li>
<li><a href="http://martinfowler.com/articles/microservices.html" target="_blank" rel="external">Microservice Architecture</a> - Particular way of designing software applications as suites of independently deployable services.</li>
<li><a href="http://www.oracle.com/technetwork/issue-archive/2015/15-mar/o25architect-2458702.html" target="_blank" rel="external">Microservices and SOA</a> - Similarities, differences, and where we go from here.</li>
<li><a href="https://dzone.com/refcardz/getting-started-with-microservices" target="_blank" rel="external">Microservices RefCard</a> - Getting started with microservices.</li>
<li><a href="http://martinfowler.com/articles/microservice-trade-offs.html" target="_blank" rel="external">Microservices Trade-Offs</a> - Guide to ponder costs and benefits of the mircoservices architectural style.</li>
<li><a href="http://www.reactivemanifesto.org/" target="_blank" rel="external">Reactive Manifesto</a> - Reactive systems definition.</li>
<li><a href="http://www.reactive-streams.org/" target="_blank" rel="external">Reactive Streams</a> - Initiative to provide a standard for asynchronous stream processing with non-blocking back pressure.</li>
<li><a href="http://resources.1060research.com/docs/2015/Resource-Oriented-Computing-Adaptive-Systems-ROCAS-1.2.pdf" target="_blank" rel="external">ROCAS</a> - Resource Oriented Computing for Adaptive Systems. :small_orange_diamond:<sup>PDF</sup></li>
<li><a href="http://ceur-ws.org/Vol-746/IWSECO2011-6-DengYu.pdf" target="_blank" rel="external">SECO</a> - Understanding software ecosystems:<br>a strategic modeling approach. :small_orange_diamond:<sup>PDF</sup></li>
<li><a href="https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/" target="_blank" rel="external">Service Discovery in a Microservice Architecture</a> - Overview of discovery and registration patterns.</li>
<li><a href="http://martinfowler.com/articles/microservice-testing/" target="_blank" rel="external">Testing Strategies in a Microservice Architecture</a> - Approaches for managing the additional testing complexity of multiple independently deployable components.</li>
<li><a href="http://monkey.org/~marius/funsrv.pdf" target="_blank" rel="external">Your Server as a Function</a> - Describes three abstractions which combine to present a powerful programming model for building safe, modular, and efficient server software: Composable futures, services and filters. :small_orange_diamond:<sup>PDF</sup></li>
</ul>
<h3 id="Talks"><a href="#Talks" class="headerlink" title="Talks"></a>Talks</h3><ul>
<li><a href="http://jonasboner.com/bla-bla-microservices-bla-bla/" target="_blank" rel="external">Bla Bla Microservices Bla Bla</a> - A talk at the O’Reilly Software Architecture Conference, April 2016.</li>
</ul>
<h3 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h3><ul>
<li><a href="http://www.skybert.net/python/developing-a-restful-micro-service-in-python/" target="_blank" rel="external">Developing a RESTful Microservice in Python</a> - A story of how an aging Java project was replaced with a microservice built with Python and Flask.</li>
<li><a href="https://game-on.org/" target="_blank" rel="external">Game On!</a> - Microservices architecture explained in the context of an old-school text-based adventure game.</li>
<li><a href="https://aws.amazon.com/blogs/compute/microservices-without-the-servers/" target="_blank" rel="external">Microservices without the Servers</a> - Step by step demo-driven talk about serverless architecture.</li>
<li>Microservices in C#: <a href="http://insidethecpu.com/2015/07/17/microservices-in-c-part-1-building-and-testing/" target="_blank" rel="external">Part 1</a>, <a href="http://insidethecpu.com/2015/07/31/microservices-in-c-part-2-consistent-message-delivery/" target="_blank" rel="external">Part 2</a>, <a href="http://insidethecpu.com/2015/08/14/microservices-in-c-part-3-queue-pool-sizing/" target="_blank" rel="external">Part 3</a>, <a href="http://insidethecpu.com/2015/08/28/microservices-in-c-part-4-scaling-out/" target="_blank" rel="external">Part 4</a>, <a href="http://insidethecpu.com/2015/09/11/microservices-in-c-part-5-autoscaling/" target="_blank" rel="external">Part 5</a>.</li>
<li><a href="http://brunorocha.org/python/microservices-with-python-rabbitmq-and-nameko.html" target="_blank" rel="external">Microservices with Python, RabbitMQ and Nameko</a></li>
<li><a href="https://blog.codeship.com/packer-ansible/" target="_blank" rel="external">Using Packer and Ansible to build immutable infrastructure</a></li>
</ul>
<h3 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h3><ul>
<li><a href="https://www.nginx.com/wp-content/uploads/2015/01/Building_Microservices_Nginx.pdf" target="_blank" rel="external">Building Microservices</a> - Building Microservices: Designing Fine-grained Systems. Sam Newman. Preview Edition. :small_orange_diamond:<sup>PDF</sup></li>
<li><a href="http://shop.oreilly.com/product/0636920050308.do" target="_blank" rel="external">Microservice Architecture: Aligning Principles, Practices, and Culture</a> - Practical advice for the strategy and design of Microservices.</li>
<li><a href="http://www.redbooks.ibm.com/abstracts/sg248275.html?Open" target="_blank" rel="external">Microservices from Theory to Practice</a> - Microservices from Theory to Practice: Creating Applications in IBM Bluemix Using the Microservices Approach. IBM Redbooks publication.</li>
<li><a href="http://pivotal.io/platform/migrating-to-cloud-native-application-architectures-ebook" target="_blank" rel="external">Migrating to Cloud Native Application Architectures</a> - This O’Reilly report defines the unique characteristics of cloud native application architectures such as microservices and twelve-factor applications.</li>
<li><a href="http://theartofscalability.com/" target="_blank" rel="external">The Art of Scalability</a> - The Art of Scalability: Scalable Web Architecture, Processes, and Organizations for the Modern Enterprise. Martin L. Abbott, Michael T. Fisher.</li>
<li><a href="http://thenewstack.io/ebookseries/" target="_blank" rel="external">The New Stack eBook Series</a> - A Comprehensive Overview of the Docker and Container Ecosystem.<ul>
<li>Book 1: The Docker Container Ecosystem.</li>
<li>Book 2: Applications &amp; Microservices with Docker &amp; Containers.</li>
<li>Book 3: Automation &amp; Orchestration with Docker &amp; Containers.</li>
<li>Book 4: Network, Security &amp; Storage with Docker &amp; Containers.</li>
<li>Book 5: Monitoring &amp; Management with Docker &amp; Containers.</li>
</ul>
</li>
<li><a href="https://www.manning.com/books/the-tao-of-microservices" target="_blank" rel="external">The Tao of Microservices</a> - Teaches the path to understanding how to apply microservices architecture with your own real-world projects.</li>
</ul>
<h3 id="Sites"><a href="#Sites" class="headerlink" title="Sites"></a>Sites</h3><ul>
<li><a href="http://martinfowler.com/microservices/" target="_blank" rel="external">Microservices Resource Guide</a> - Martin Fowler’s choice of articles, videos, books, and podcasts that can teach you more about the microservices architectural style.</li>
<li><a href="http://microservices.io/" target="_blank" rel="external">Microservice Patterns</a> - Microservice architecture patterns and best practices.</li>
<li><a href="http://12factor.net" target="_blank" rel="external">The 12-Factors App</a> - A methodology for building software-as-a-service applications.</li>
</ul>
<h2 id="Emerging_Technologies"><a href="#Emerging_Technologies" class="headerlink" title="Emerging Technologies"></a>Emerging Technologies</h2><ul>
<li><a href="https://github.com/blockstack/blockchain-id/wiki" target="_blank" rel="external">Blockchain ID</a> - A unique identifier that is secured by a blockchain. Blockchain IDs are simultaneously secure, human-meaningful, and decentralized, thereby squaring Zooko’s triangle.</li>
<li><a href="http://blocknet.co/" target="_blank" rel="external">Blocknet</a> - The Blocknet makes possible to deliver microservices over a blockchain-based P2P network architecture.</li>
<li><a href="http://edgware-fabric.org/" target="_blank" rel="external">Edgware Fabric</a> - Lightweight, agile service bus for systems at the edge of the network, in the physical world.</li>
<li><a href="http://www.multichain.com/" target="_blank" rel="external">MultiChain</a> - Open platform for building blockchains.</li>
<li><a href="http://nodered.org/" target="_blank" rel="external">Node-RED</a> - Visual tool for wiring together hardware devices, APIs and online services in new and interesting ways.</li>
<li><a href="http://www.ponylang.org/" target="_blank" rel="external">Pony</a> - Open source, object-oriented, actor-model, capabilities-secure, high performance programming language.</li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p><a href="http://creativecommons.org/publicdomain/zero/1.0/" target="_blank" rel="external"><img src="http://i.creativecommons.org/p/zero/1.0/88x31.png" alt="CC0"></a></p>
<h2 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h2><p>Please, read the <a href="https://github.com/mfornos/awesome-microservices/blob/master/CONTRIBUTING.md" target="_blank" rel="external">Contribution Guidelines</a> before submitting your suggestion.</p>
<p>Feel free to <a href="https://github.com/mfornos/awesome-microservices/issues" target="_blank" rel="external">open an issue</a> or <a href="https://github.com/mfornos/awesome-microservices/pulls" target="_blank" rel="external">create a pull request</a> with your additions.</p>
<p>:star2: Thank you!</p>
<h2 id="Acknowledgments"><a href="#Acknowledgments" class="headerlink" title="Acknowledgments"></a>Acknowledgments</h2><p>Table of contents generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="external">DocToc</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>转载</strong></p>
<p>原地址：<a href="https://github.com/mfornos/awesome-microservices" target="_blank" rel="external">https://github.c]]>
    </summary>
    
      <category term="微服务" scheme="http://lq08025107.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[docker杂谈]]></title>
    <link href="http://lq08025107.github.io/2016/11/10/docker%E6%9D%82%E8%B0%88/"/>
    <id>http://lq08025107.github.io/2016/11/10/docker杂谈/</id>
    <published>2016-11-10T02:58:47.000Z</published>
    <updated>2016-11-10T04:40:27.046Z</updated>
    <content type="html"><![CDATA[<h3 id="u4EC0_u4E48_u662Fdocker"><a href="#u4EC0_u4E48_u662Fdocker" class="headerlink" title="什么是docker"></a>什么是docker</h3><p>最近工作需要，项目需要做一些底层虚拟化的东西，加之之前“师傅”说过有空弄弄docker，就又拾起来这东西。容器技术是虚拟化的一种，一个容器就可以理解为一个虚拟机。docker就是最火的一种容器技术，容器里边你可以干你任何想干的事情。为什么要弄出容器这么个概念呢，直接vmware workstation里边跑不行吗？答案当然是可以的，但是docker比虚拟机省资源呀，而且适合开发部署时候一条龙服务，诸多优点网上很多，以上就是我对docker以及优点的通俗解释。<br><a id="more"></a></p>
<h3 id="u4E00_u5B9A_u8981_u6253_u597D_u57FA_u7840"><a href="#u4E00_u5B9A_u8981_u6253_u597D_u57FA_u7840" class="headerlink" title="一定要打好基础"></a>一定要打好基础</h3><p>基础真的非常重要！！！遇到一个新东西，首先是概念，然后是基础，然后是进阶，最后才是折腾出你想要的东西。这个规律不可违背，否则就会走弯路。具体docker来说，镜像和容器这两个概念是docker一切的基础。</p>
<p>废话两句，宿主OS最好选用linux，我用的ubuntu 14.04，或者win10，总感觉Windows下ToolBox不那么好用。</p>
<p>docker Daemon：当你在宿主机安装了docker之后，就有了一个Daemon，我的理解，docker daemon就像一个管理者，替你管理着其中的容器。</p>
<p>docker Image：docker镜像涉及layer的概念，可以想象一下photoshop的层的概念，每一层都有不同的文件，最后的镜像就有由一堆文件组成的，所以当你docker pull的时候，总是看见一个镜像由好多层组成，当你pull下来或者通过dockerfile build出镜像，他就是个固定的东西了。docker images可以查看当前daemon中的镜像。这里有关于Image的详细解释。<a href="http://www.open-open.com/lib/view/open1446695630904.html" target="_blank" rel="external">Image</a></p>
<p>docker container：要着重理解image和container的区别，container是通过image构建出来的，container有运行态和非运行态，docker ps和docker ps -a就可以分别查看之。每一个docker run都会产生一个容器，在此期间你对该容器所做的修改都将存储在了Container中，如果下次你还想继续使用，那么就应该docker start containerID，而不是run了，这点很重要。</p>
<p>docker基本操作如下图所示：</p>
<p><img src="http://7xr558.com1.z0.glb.clouddn.com/docker.png" alt="docker基础操作"></p>
<p>单机docker的操作基本如上图所示，上图右边三个工具，docker machine、docker compose、 docker swarm,号称docker三大利器，其作用分别如下：</p>
<p>Machine： 解决的是操作系统异构安装Docker困难的问题，没有Machine的时候，CentOS是一种，Ubuntu又是一种，AWS又是一种。有了Machine，所有的系统都是一样的安装方式。</p>
<p>Swarm： 我们有了Machine就意味着有了docker环境，但是那是单机的，而通常我们的应用都是集群的。这正是Swarm要做的事情，给你提供docker集群环境和调度策略等。</p>
<p>Compose: 有了环境，我们下一步要做什么？部署应用啊。然后我们需要docker run image1、docker run image2…一次一次不厌其烦的重复这些操作，每次都写大量的命令参数。Compose简化了这个流程，只需要把这些内容固化到docker-compose.yml中。</p>
<p>个人感觉docker在集群方面不很方便，集群最后落脚在网络通信，所以docker集群部署不很方便的最主要原因就是网络问题，针对网络问题，也有各种花式解决方案，譬如linux下的工具pipeline、weave等等，swarm用官方的话来说是一种原生集群解决方案。</p>
<p>接下来放一张神图，网上找的docker eco的一张图，可以大体了解这个生态圈。<br><img src="http://7xr558.com1.z0.glb.clouddn.com/docker%20eco.jpg" alt="docker eco"></p>
<h3 id="docker_u4E2D_u8FD0_u884C_u5BB9_u5668"><a href="#docker_u4E2D_u8FD0_u884C_u5BB9_u5668" class="headerlink" title="docker中运行容器"></a>docker中运行容器</h3><p>根据自己的需求运行各种容器，两种构建方法，一种是通过docker file来构建，一种是直接从docker hub上pull，一般你想到的hub上都有，譬如什么storm、kafka，这两个我都尝试构建了一下，用了docker search中star比较高的ches/kafka等等，感谢作者辛勤奉献。</p>
<p>docker ui 是一个不错的项目，本身运行在一个容器中，监控一个主机的deamon，适合新手使用，给你最直观的理解。<br>shipyard则可以管理集群，但是部署比较复杂，工具类的东西大家可以按照自己的需求来选择。</p>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>七七八八写了一些，没有涉及具体的操作命令，那些都可以从官方doc中找到，只是写了一些个人理解，但是自己觉得也写的很屎，究其原因还是自己水平不够，所以这篇博客就到这儿，再研究研究有了新的想法再写。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4EC0_u4E48_u662Fdocker"><a href="#u4EC0_u4E48_u662Fdocker" class="headerlink" title="什么是docker"></a>什么是docker</h3><p>最近工作需要，项目需要做一些底层虚拟化的东西，加之之前“师傅”说过有空弄弄docker，就又拾起来这东西。容器技术是虚拟化的一种，一个容器就可以理解为一个虚拟机。docker就是最火的一种容器技术，容器里边你可以干你任何想干的事情。为什么要弄出容器这么个概念呢，直接vmware workstation里边跑不行吗？答案当然是可以的，但是docker比虚拟机省资源呀，而且适合开发部署时候一条龙服务，诸多优点网上很多，以上就是我对docker以及优点的通俗解释。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://lq08025107.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java代理]]></title>
    <link href="http://lq08025107.github.io/2016/07/17/Java%E4%BB%A3%E7%90%86/"/>
    <id>http://lq08025107.github.io/2016/07/17/Java代理/</id>
    <published>2016-07-17T08:35:48.000Z</published>
    <updated>2016-07-17T08:52:16.085Z</updated>
    <content type="html"><![CDATA[<h3 id="u5199_u5728_u6700_u524D_u9762"><a href="#u5199_u5728_u6700_u524D_u9762" class="headerlink" title="写在最前面"></a>写在最前面</h3><p>距离上一次写博客不知道经过多久了，有很多原因吧，家里的事占用了一部分心情，然后就是工行的破事，没完没了，最近终于脱身来做一些自己不反感的事情了，身体上累一点也觉得不那么难受</p>
<h3 id="u4E3B_u9898_uFF1A_u4EE3_u7406"><a href="#u4E3B_u9898_uFF1A_u4EE3_u7406" class="headerlink" title="主题：代理"></a>主题：代理</h3><p>代理这个词在生活中出现的频率可谓不低，上网挂代理、微商代理，其实细想想和编程中的代理是一回事，就拿微商代理来说，真正的产品供货商就是你程序中的业务实体（类、接口），那些成天发朋友圈的讨厌的人就是代理，你是客户端，客户端请求时不与服务提供商直接打交道，而是通过代理。但有一点不同的是，微商代理很讨厌，而编程中的代理很讨人喜欢。当然他们都有共同点，那就是<strong>代理可以帮你做一些额外的事情</strong>。<br>代理模式会隐藏真实的业务主体，从而达到一种封装的效果，这也是面向对象编程的一个基本思想吧。<br><a id="more"></a></p>
<h3 id="u9759_u6001_u4EE3_u7406"><a href="#u9759_u6001_u4EE3_u7406" class="headerlink" title="静态代理"></a>静态代理</h3><p>首先谈一谈静态代理，静态代理是最简单的代理模式。直接上代码：</p>
<p>业务接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBusiness</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">earnMoney</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>真实业务主体，实现了业务接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Business</span> <span class="keyword">implements</span> <span class="title">IBusiness</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">earnMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"股票上涨"</span>);				</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代理类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessProxy</span> <span class="keyword">implements</span> <span class="title">IBusiness</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> IBusiness ib;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BusinessProxy</span><span class="params">(IBusiness ib)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.ib=ib;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">earnMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">		buy();</span><br><span class="line">		ib.earnMoney();</span><br><span class="line">		sell();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"低价买进"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"高价卖出"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>程序入口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">	IBusiness ib=<span class="keyword">new</span> Business();</span><br><span class="line">	IBusiness ibp=<span class="keyword">new</span> BusinessProxy(ib);</span><br><span class="line">	ibp.earnMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这就实现了一个最简单的代理类，实体类只是说股票要上涨，然而你无动于是，还是赚不了钱，所以需要代理类来帮你做一些买入卖出操作，这样你才能完成这个操作。</p>
<h3 id="Java_u52A8_u6001_u4EE3_u7406"><a href="#Java_u52A8_u6001_u4EE3_u7406" class="headerlink" title="Java动态代理"></a>Java动态代理</h3><p>使用静态代理虽然达到了上述目的，但是必须手动创建业务类，这样其实增加了耦合度，所以Java中有了动态代理。动态代理需要引用java中的Proxy类以及InvocationHandler接口。<br>上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMasterBusiness</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">earnMoney</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MasterBusiness</span> <span class="keyword">implements</span> <span class="title">IMasterBusiness</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">earnMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"股票上涨"</span>);				</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MasterBusinessIntercepter</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"低价买进"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"高价卖出"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterBusinessHander</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理的对象</span></span><br><span class="line">    <span class="keyword">private</span> Object masterBusinee;</span><br><span class="line">    <span class="comment">//拦截器</span></span><br><span class="line">    <span class="keyword">private</span> MasterBusinessIntercepter intercepter = <span class="keyword">new</span> MasterBusinessIntercepter();</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MasterBusinessHander</span><span class="params">(Object masterBusinee)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.masterBusinee = masterBusinee;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(method.getName().equals(<span class="string">"earnMoney"</span>))&#123;</span><br><span class="line">            intercepter.buy();</span><br><span class="line">            result = method.invoke(masterBusinee, args);</span><br><span class="line">            intercepter.sell();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result = method.invoke(masterBusinee, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个调用器</span></span><br><span class="line">        MasterBusinessHander handler = <span class="keyword">new</span> MasterBusinessHander(<span class="keyword">new</span> MasterBusiness());</span><br><span class="line">        IMasterBusiness target = (IMasterBusiness)Proxy.newProxyInstance(<span class="keyword">new</span> MasterBusiness().getClass().getClassLoader(), <span class="keyword">new</span> MasterBusiness().getClass().getInterfaces(), handler);</span><br><span class="line">        target.earnMoney();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，上述动态代理将sell和buy方法剥离了出来，达到了目的，这也是Java动态代理的标准创建流程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5199_u5728_u6700_u524D_u9762"><a href="#u5199_u5728_u6700_u524D_u9762" class="headerlink" title="写在最前面"></a>写在最前面</h3><p>距离上一次写博客不知道经过多久了，有很多原因吧，家里的事占用了一部分心情，然后就是工行的破事，没完没了，最近终于脱身来做一些自己不反感的事情了，身体上累一点也觉得不那么难受</p>
<h3 id="u4E3B_u9898_uFF1A_u4EE3_u7406"><a href="#u4E3B_u9898_uFF1A_u4EE3_u7406" class="headerlink" title="主题：代理"></a>主题：代理</h3><p>代理这个词在生活中出现的频率可谓不低，上网挂代理、微商代理，其实细想想和编程中的代理是一回事，就拿微商代理来说，真正的产品供货商就是你程序中的业务实体（类、接口），那些成天发朋友圈的讨厌的人就是代理，你是客户端，客户端请求时不与服务提供商直接打交道，而是通过代理。但有一点不同的是，微商代理很讨厌，而编程中的代理很讨人喜欢。当然他们都有共同点，那就是<strong>代理可以帮你做一些额外的事情</strong>。<br>代理模式会隐藏真实的业务主体，从而达到一种封装的效果，这也是面向对象编程的一个基本思想吧。<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://lq08025107.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java volatile 关键字]]></title>
    <link href="http://lq08025107.github.io/2016/07/12/Java-volatile-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://lq08025107.github.io/2016/07/12/Java-volatile-关键字/</id>
    <published>2016-07-12T15:30:59.000Z</published>
    <updated>2016-07-12T15:37:34.901Z</updated>
    <content type="html"><![CDATA[<p>看到了一篇特别好的博文，就专门开一贴转载过来，从今天开始慢慢重新开始写博客</p>
<p><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="external">Java并发编程：volatile关键字解析</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>看到了一篇特别好的博文，就专门开一贴转载过来，从今天开始慢慢重新开始写博客</p>
<p><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="external">J]]>
    </summary>
    
      <category term="Java" scheme="http://lq08025107.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Consul+Consul template+Docker+Registrator+nginx实现动态服务注册和服务发现]]></title>
    <link href="http://lq08025107.github.io/2016/03/26/%E4%BD%BF%E7%94%A8Consul-Consul-template-Docker-Registrator-nginx%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
    <id>http://lq08025107.github.io/2016/03/26/使用Consul-Consul-template-Docker-Registrator-nginx实现动态服务注册和服务发现/</id>
    <published>2016-03-26T09:26:12.000Z</published>
    <updated>2016-03-26T09:30:26.291Z</updated>
    <content type="html"><![CDATA[<p><strong>写在最前面</strong>：本文尝试使用Docker、Registrator、Consul、Consul-template和Nginx实现可扩展的、支持服务注册、服务发现的架构。本文不涉及这些软件的具体实现方法，是对其功能进行探索。<br><a id="more"></a></p>
<h1 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h1><p><strong>Docker</strong>，容器(Container)技术近年来为什么会兴起？我的理解是因为整个世界都是网络了，既然有网络应用的消费者，那必须就有网络应用的生产者，容器技术就是生产者为了解脱自己的痛苦而创造的一个东西，背后的思想是创建软件程序可移植的轻量容器。通俗地讲，开发者在开发环境中开发自己的应用，要部署到实际生产线是一件非常复杂的事情，docker的出现，使得开发者一切操作都在docker中进行，把docker搬到生产环境中即可使用，非常方便。<em>软件的出现的目的总是让使用者更加方便</em>，所以学习一下docker还是会给你一种新的启发。</p>
<p><strong>Consul</strong>，Consul是HahsiCorp开发的一个服务发现与配置的项目，Consul实质上以KV形式保存数据，你可以理解Consul就是你的<strong>服务管家</strong>，这个管家不止可以创建Cluster，还有良好的Web界面，值得推荐。这时不得不提到另一个大名鼎鼎的动物园管家，Zookeeper，在公司实际项目中，zk来做服务的发现注册已经有一套方案，本文的方法算是另一条路吧，不存在好坏之分。</p>
<p>Consul-template，他在监控着Consul，当其发现其中的服务项有变化时，更新文件并执行操作。譬如本文中要做的，更新nginx配置文件，并对nginx进行<strong>优雅</strong>地重启。</p>
<p><strong>Registrator</strong>，原名叫Docksul，看名字就知道，他和docker分不开，本文非要引入docker的原因也是因为他，他是一个为docker而设计的服务注册项目，他监听跨主机运行的容器的启动和停止，检查并向Consul注册。其实本文中其他的项目都可以单独在宿主机上运行，只是这个Registrator不行，所以最后的方案还是经过考虑再选择，毕竟学习docker也是需要一定的成本的。</p>
<p><strong>Nginx</strong>，这个软件就不用介绍了，大名鼎鼎，做静态文件服务器、反向代理、路由选择、负载均衡，支持极高并发，主流是nginx+tomcat?这个我不太清楚业界主流是Nginx加什么。多嘴一句，如果有兴趣阅读Nginx源码，要找到合适的方法，个人觉得还是彻底先了解功能后再进行源码阅读会比较好。</p>
<h1 id="u5927_u4F53_u601D_u8DEF"><a href="#u5927_u4F53_u601D_u8DEF" class="headerlink" title="大体思路"></a>大体思路</h1><p>1.启动Consul，Consul直接在宿主机上运行可以，在容器中运行也可以，看需求，本文后面的实际操作中，将Consul放到了Docker中。</p>
<p>2.Service A、Service B、Service C在启动时向Consul中注册自己，其他服务启动时也主动向Consul注册。</p>
<p>3.运行Consul template，正如概述中讲的，本文中template的作用就是更新Nginx配置文件并重启Nginx，我原本想这些组件都在Docker中运行，但是奈何我国国情，我真的pull不下来Consul template，所以就只能在宿主机上运行了。<strong>FUCK the GFW！</strong></p>
<p>4.Nginx，做负载均衡，要起得作用是动态的把网络消费者的请求转发到后台的Docker中。</p>
<p>大体流程图如下，配合着上述大体思路，我觉得应该能看懂了。<br><img src="http://7xr558.com1.z0.glb.clouddn.com/Service_Discovery.png" alt="Servive Discovery"></p>
<h1 id="u5B9E_u9645_u64CD_u4F5C"><a href="#u5B9E_u9645_u64CD_u4F5C" class="headerlink" title="实际操作"></a>实际操作</h1><p>实验环境：Ubuntu 14.04 <strong>64位</strong>，Docker官方强调64位了，也许你32的也能安上，但是pull下的很多东西不能用，比较蛋疼。</p>
<p>1.docker的安装和使用，自行Google或Bing。</p>
<p>2.构建一个web服务，此处参考</p>
<p>web服务器的Dockerfile如下：(注意：python3中好像是http.server)</p>
<pre><code>FROM python:2.7
EXPOSE 80
CMD [&quot;python&quot;,&quot;-m&quot;,&quot;SimpleHTTPServer&quot; ]
</code></pre><p>在Dockerfile所在的文件夹下执行,创建以个名为simplehttpserver的镜像</p>
<pre><code>docker build -t simplehttpserver .
</code></pre><p>利用上面创建的镜像构建容器：</p>
<pre><code>docker run -it -p 8000:80 simplehttpserver
</code></pre><p>即可通过浏览器或者<code>curl</code>访问。</p>
<p>3.docker中运行Consul（此处正式开始操作，第2步只是基础服务，要在系统跑起来之后再注册服务）</p>
<pre><code>docker run -it -h node -p 8500:8500 -p 8600:53/udp progrium/consul -server -bootstrap -advertise 127.0.0.1 -log-level debug
</code></pre><p>运行之后，Consul是自带UI界面的，所以通过浏览器可以访问。</p>
<p>4.docker中运行Registrator</p>
<pre><code>docker run -d --name=registratror --net=host --volume=/var/run/docker.sock:/tmp/docker.sock gliderlabs/registrator consul://127.0.0.1:8500
</code></pre><p>5.Host中运行Consul-template</p>
<pre><code>./consul-template -consul 127.0.0.1:8500 &quot;/etc/nginx/conf.d/test.ctmpl:/etc/nginx/config.d/test.conf:nginx -s reload&quot;
</code></pre><p>consul-template指定了模板的位置和生成文件的存放位置，然后对nginx进行重启就可以了。</p>
<p>上述步骤中各个模块的具体参数可以查看help。</p>
<h1 id="One_more_thing_u2026"><a href="#One_more_thing_u2026" class="headerlink" title="One more thing…"></a>One more thing…</h1><p>这个框架中的关键是Consul,这里用到了Consul的服务注册，个人感觉Consul服务注册有三种方法吧</p>
<p>A.通过编写配置文件(json)，指定配置文件的存放目录 –config-dir</p>
<p>B.通过Consul HTTP API，在实际程序中调用，当程序运行起来的时候自动注册</p>
<p>C.第三方注册，结合Docker使用，使用Registrator这样的工具</p>
<p>其中的优缺点想必大家也都了解了，通过A是要手动编写json配置文件并向Consul发送一个reload命令，我在想这样做好像不太合适，我们的目的是自动化的实现服务注册，在本文的应用场景下，与其重启Consul，还不如来个<code>nginx -s reload</code>,反正总有一个要重启嘛。B方案目前还没有实践，但可以想到也是会有问题的，在你程序里平白无辜加一段控制代码，谁都不愿意。C方案正是本文的实践方法，可以实现完全动态，但依赖于Docker平台和Registrator组件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>写在最前面</strong>：本文尝试使用Docker、Registrator、Consul、Consul-template和Nginx实现可扩展的、支持服务注册、服务发现的架构。本文不涉及这些软件的具体实现方法，是对其功能进行探索。<br>]]>
    
    </summary>
    
      <category term="Service Discovery" scheme="http://lq08025107.github.io/tags/Service-Discovery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sad]]></title>
    <link href="http://lq08025107.github.io/2016/03/19/Sad/"/>
    <id>http://lq08025107.github.io/2016/03/19/Sad/</id>
    <published>2016-03-19T14:38:10.000Z</published>
    <updated>2016-03-19T14:39:01.524Z</updated>
    <content type="html"><![CDATA[<p>以后再也见不到奶奶了。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>以后再也见不到奶奶了。。。</p>
]]>
    </summary>
    
      <category term="生活" scheme="http://lq08025107.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[What is exactly RESRful programming]]></title>
    <link href="http://lq08025107.github.io/2016/03/09/What-is-exactly-RESRful-programming/"/>
    <id>http://lq08025107.github.io/2016/03/09/What-is-exactly-RESRful-programming/</id>
    <published>2016-03-09T14:19:44.000Z</published>
    <updated>2016-03-09T14:25:26.411Z</updated>
    <content type="html"><![CDATA[<p>相信大家在理解REST的时候挺困难吧，最近在理解的时候发现这么一个神贴，有助于理解REST。</p>
<p><strong>What is exactly RESRful programming</strong><br><a href="http://stackoverflow.com/questions/671118/what-exactly-is-restful-programming" target="_blank" rel="external">http://stackoverflow.com/questions/671118/what-exactly-is-restful-programming</a></p>
<p>REST和HTTP本来就相辅相成，一切用资源表述，外加几个动作，世界上万物和万物的吃喝拉撒就都解决了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>相信大家在理解REST的时候挺困难吧，最近在理解的时候发现这么一个神贴，有助于理解REST。</p>
<p><strong>What is exactly RESRful programming</strong><br><a href="http://stackoverfl]]>
    </summary>
    
      <category term="REST" scheme="http://lq08025107.github.io/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[三月所感]]></title>
    <link href="http://lq08025107.github.io/2016/03/09/%E4%B8%89%E6%9C%88%E6%89%80%E6%84%9F/"/>
    <id>http://lq08025107.github.io/2016/03/09/三月所感/</id>
    <published>2016-03-09T11:51:37.000Z</published>
    <updated>2016-03-09T12:19:42.000Z</updated>
    <content type="html"><![CDATA[<p>这段日子比较忙，乱七八糟的事情，今天觉得还是瞎写写，有关生活的。</p>
<p>1.关于强行开博的问题。这个是我之前在知乎看到的一个问题，原帖内容是<strong>“你们周围有在github，博客上很活跃，但工作收入并不是很好的码农吗？”</strong>原帖链接如下：<br><a id="more"></a></p>
<p><a href="http://www.zhihu.com/question/32247845" title="你们周围有在github，博客上很活跃，但工作收入并不是很好的码农吗？" target="_blank" rel="external">http://www.zhihu.com/question/32247845</a></p>
<p>很多大神们都各抒己见，也有提到关于强行开博的问题，我就说说自己的感受，就拿我来说,</p>
<p>A.我之前也写的，我开博客，不一定完全是技术博，我这不也在写关于生活嘛，有时候记录一下生活感觉也是蛮好的。</p>
<p>B.博客的确很浪费时间。开了博客之后才注意到，写博客的确挺浪费时间的，前几篇本来脑子里还有点东西，可是那天写到了挺晚，然后舍友睡了，我这啪啦啪啦的敲键盘也不好，就匆匆结尾了。</p>
<p>C.博客的技术含量问题。这个其实是我最看重的问题，现在基本每个人都有个技术博，很多人写的都没什么技术含量，篇数倒是挺多，包括我自己在内，我的很多博客也是参考各种资料，技术含量基本为0，也只能给刚接触的人提供个参考。<strong>我的理解是：</strong>我完全拿博客当个日记了，复杂点的日记，记录自己学习的过程，也没期望有人看，别人看了我还会觉得会不会耽误人家的时间，所以也会尽量提高博客的含金量，尽力就好，毕竟这个社会冗余信息这么多，互联网上的信息也不在乎多我这么一点点，呵呵，有点无耻了。</p>
<p>2.前段时间忙着浏览各种J2EE和分布式技术，大约有JSP、Servlet、JavaBean、Struts2、Hibernate，RPC、Zookeeper，花了一俩周时间吧，的确了解到了不少，但是都没有深入，特别感谢<strong>王昊</strong>的指导，等再深入点、有时间的时候写一下，记录之。这俩天也算有点瓶颈了，还在努力突破，希望自己能在这条路上走的远一点吧，我还是对这些有些兴趣的。</p>
<p>3.今天<strong>户口</strong>下来了。我明白在帝都一个户口的重要性，也知道为了这个户口我所牺牲的东西，一步一步走到了今天，也不知道怎么形容了，不能说有悲，也不能说有喜，日子可能本身就这样吧。</p>
<p>今天就写这么多了，辅导一下二潇这个傻孩子。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这段日子比较忙，乱七八糟的事情，今天觉得还是瞎写写，有关生活的。</p>
<p>1.关于强行开博的问题。这个是我之前在知乎看到的一个问题，原帖内容是<strong>“你们周围有在github，博客上很活跃，但工作收入并不是很好的码农吗？”</strong>原帖链接如下：<br>]]>
    
    </summary>
    
      <category term="生活" scheme="http://lq08025107.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EasyDarwin入门实践]]></title>
    <link href="http://lq08025107.github.io/2016/03/06/EasyDarwin%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5/"/>
    <id>http://lq08025107.github.io/2016/03/06/EasyDarwin入门实践/</id>
    <published>2016-03-06T05:50:51.000Z</published>
    <updated>2016-03-06T05:54:01.729Z</updated>
    <content type="html"><![CDATA[<h1 id="EasyDarwin_u5F00_u6E90_u6D41_u5A92_u4F53_u5E73_u53F0"><a href="#EasyDarwin_u5F00_u6E90_u6D41_u5A92_u4F53_u5E73_u53F0" class="headerlink" title="EasyDarwin开源流媒体平台"></a>EasyDarwin开源流媒体平台</h1><p>本文大部分内容参考<br><a href="/EasyDarwin">http://doc.easydarwin.org/EasyDarwin/README/</a></p>
<p><strong>EasyDarwin</strong>是由国内开源流媒体团队开发和维护的一款开源流媒体平台框架，从2012年12月创建并发展至今，从原有的单服务的流媒体服务器形式，扩展成现在的云平台架构的开源项目，更好地帮助广大流媒体开发者和创业型企业快速构建流媒体服务平台，更快、更简单地实现最新的移动互联网(安卓、IOS、微信)流媒体直播与点播的需求，尤其是安防行业与互联网行业的衔接。<br><a id="more"></a></p>
<h1 id="EasyDawin_u76EE_u524D_u652F_u6301"><a href="#EasyDawin_u76EE_u524D_u652F_u6301" class="headerlink" title="EasyDawin目前支持"></a>EasyDawin目前支持</h1><p>1.MP4点播回放；</p>
<p>2.标准RTSP推模式直播(QTSSReflectorModule)；</p>
<p>3.标准RTSP拉模式直播(EasyRelayModule)；</p>
<p>4.HLS直播(EasyHLSModule)；</p>
<p>5.接入EasyDarwin流媒体平台，分布式部署；</p>
<h1 id="u7F16_u8BD1_u90E8_u7F72_u65B9_u6CD5"><a href="#u7F16_u8BD1_u90E8_u7F72_u65B9_u6CD5" class="headerlink" title="编译部署方法"></a>编译部署方法</h1><p>1.获取EasyDarwin最新版本。</p>
<p>2.VS下进行项目生成，将相关dll文件拷入文件夹中即可启动服务。</p>
<p>3.配置easydarwin.xml<br>主要的几个配置项：</p>
<p><strong>rtsp_port</strong>: EasyDarwin RTSP服务监听的端口；</p>
<p><strong>movie_folder</strong>:媒体文件存储的路径，包括点播文件、直播切片生成的hls文件；</p>
<p><strong>http_service_port</strong>:Webservice服务端口;</p>
<p><strong>hls_output_enabled</strong>：配置QTSSReflectorModule在接收推送的同时，是否同步输出hls；</p>
<p><strong>HTTP_ROOT_DIR</strong>：配置EasyHLSModule的对外WEB路径；</p>
<p><strong>local_ip_address</strong>：配置EasyRelayModule对外服务的ip地址，因为可能会有多网卡或者内网映射，所以需要手动配置；</p>
<p>4.运行EasyDarwin</p>
<p>【前提】EasyDarwin可执行文件必须与/html/目录在同一层目录中</p>
<p>Windows版本运行(控制台调试运行)：</p>
<pre><code>EasyDarwin.exe -c ./easydarwin.xml -d
</code></pre><p>注：需要把libEasyHLS.dll，libEasyPusher.dll，libEasyRTSPClient.dll，html文件夹和Movies文件夹拷贝到可执行程序的同目录下！</p>
<p>Windows服务运行：</p>
<pre><code>cd ./
set curPath=&quot;%cd%&quot;
echo service path：%curPath%
sc create EasyDarwin binPath= &quot;%curPath%\EasyDarwin.exe -c %curPath%\easydarwin.xml&quot; start= auto
sc failure EasyDarwin reset= 0 actions= restart/0
net start EasyDarwin
pause
</code></pre><p>将这段脚本做成bat，运行，我们就创建了一个叫做EasyDarwin的Windows服务了，通过系统服务（services.msc）可以查看到。 注：Windows不同版本可能稍有差异，建议在命令行运行bat脚本，而不是直接双击运行，这样能看到具体出错原因！</p>
<p>5.具体使用示例</p>
<p>MP4点播</p>
<p>将经过Hint处理过的mp4文件存在movie_folder目录中，访问RTSP地址：</p>
<pre><code>rtsp:://[ip]:[rtsp_port]/[filename]
</code></pre><p>使用VLC等播放器即可播放。</p>
<p>推模式转发</p>
<p>直接通过标准RTSP/RTP推送流程（ANNOUNCE/SETUP/PLAY/RTP）向EasyDarwin推送音视频数据进行转发和分发，例如rtsp_port配置为8554，那我们可以直接用EasyDarwin EasyPusher或者live555 DarwinInjector向8554端口进行直播推送；</p>
<p>拉模式转发</p>
<p>调用接口（用vlc、ffplay、live555等RTSP Client调用）</p>
<pre><code>RTSP://[ip]:[rtsp_port]/EasyRelayModule?name=[relayName]&amp;url=&quot;[RTSP_URL]&quot;
</code></pre><p>例如EasyDarwin服务器IP地址是：8.8.8.8，RTSP端口(rtsp_port)：554，IPCamera的RTSP地址是：rtsp://admin:admin@192.168.66.189/22，那么我们可以：</p>
<p>1、配置easydarwin.xml EasyRelayModule</p>
<pre><code>&lt;PREF NAME=&quot;local_ip_address&quot; &gt;8.8.8.8&lt;/PREF&gt;
</code></pre><p>2、请求转发：RTSP://8.8.8.8:554/EasyRelayModule?name=live&amp;url=”rtsp://admin:admin@192.168.66.189/22” （name是定义一个拉模式转发流的唯一标识，不允许重复）</p>
<p>3、直播URL：RTSP://8.8.8.8:554/EasyRelayModule?name=live</p>
<p>4、请求停止转发：RTSP://8.8.8.8:554/EasyRelayModule?name=live&amp;cmd=stop （cmd=stop表示停止拉模式转发）</p>
<p>6.实际操作</p>
<p>A 使用EasyDarwin+VLC进行MP4点播，效果如下：<br><img src="http://7xr558.com1.z0.glb.clouddn.com/easydarwinmp4.png" alt="MP4点播"></p>
<p>B 使用EasyPuhser+EasyDarwin+Nginx查看网页直播<br>具体操作详见最上面网址，配置过程一定要知道每一步自己在干什么，配合Nginx+EasyPusher+EasyDarwin，可以实现向服务器推送RTSP流，然后转发到公网进行查看。效果如下：<br><img src="http://7xr558.com1.z0.glb.clouddn.com/HLS.png" alt="HLS"></p>
<p>7.这一套每个工具的作用<br>EasyDarwin：直播、点播，安防行业与互联网行业对接</p>
<pre><code>输入：MP4本地文件 RTSP流
输出：RTSP流 HLS直播
</code></pre><p>EasyPusher：一个给EasyDarwin推送流媒体音视频的推送库，使EasyDarwin可以进行转发和分发</p>
<pre><code>EasyPush_FILE：推送本地文件到服务器
EasyPusher_RTSP：通过EasyRTSPClient库，将RTSP/RTP数据获取到本地，再推送到EasyDarwin
支持的视频编码有：H264、MJPEG、MPEG4
支持的音频编码有：AAC、G711 alaw、G711 ulaw
</code></pre><p>EasyHLS：只需要传入打包的文件名、切片存放的目录、单个切片时长以及切片数等参数，EasyHLS库就能轻松将H264+AAC的流媒体切片成m3u8+ts，提供给WEB服务器进行HLS流媒体发布；</p>
<pre><code>EasyHLS_RTSP：通过RTSPClient将RTSP URL的流媒体数据获取并进行ts打包，提供HLS直播
</code></pre><p>EasyRTSPClient：EasyRTSPClient是EasyDarwin开源流媒体团队提供的一套非常稳定、易用、支持重连的RTSPClient工具，接口调用非常简单，再也不用像调用live555那样处理整个RTSP OPTIONS/DESCRIBE/SETUP/PLAY的复杂流程，担心内存释放的问题了！</p>
<pre><code>拉取RTSP流到本地
</code></pre><p>EasyClient：客户端项目，支持多种源接入，Windows摄像头、麦克风、RTSP摄像机、屏幕桌面，采集后经过264编码、EasyPuhser推送到流媒体服务器进行转发；还支持通过EasyRTSPClient拉取EasyDarwin直播流，充当VLC的作用。如下图所示：</p>
<p><img src="http://7xr558.com1.z0.glb.clouddn.com/EasyClient.png" alt="Client"></p>
<p>总之，这一套解决方案算是全的了，有如下这些（官网截图，我们用的只是其中一小部分）：</p>
<p><img src="http://7xr558.com1.z0.glb.clouddn.com/EasyDarwin%E7%B3%BB%E5%88%97%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt="系列解决方案"></p>
<p>8.科普小知识</p>
<p>HLS(HTTP Living Streaming):Apple的动态码率自适应技术。主要用于PC和Apple终端的音视频服务。包括一个m3u(8)的索引文件，TS媒体分片文件和key加密串文件。</p>
<p>RTSP(Real Time Streaming Protocol):实时流传输协议，用于在客户端和服务器之间建立和协商实时流会话。</p>
<p>有兴趣的可以多研究研究。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="EasyDarwin_u5F00_u6E90_u6D41_u5A92_u4F53_u5E73_u53F0"><a href="#EasyDarwin_u5F00_u6E90_u6D41_u5A92_u4F53_u5E73_u53F0" class="headerlink" title="EasyDarwin开源流媒体平台"></a>EasyDarwin开源流媒体平台</h1><p>本文大部分内容参考<br><a href="/EasyDarwin">http://doc.easydarwin.org/EasyDarwin/README/</a></p>
<p><strong>EasyDarwin</strong>是由国内开源流媒体团队开发和维护的一款开源流媒体平台框架，从2012年12月创建并发展至今，从原有的单服务的流媒体服务器形式，扩展成现在的云平台架构的开源项目，更好地帮助广大流媒体开发者和创业型企业快速构建流媒体服务平台，更快、更简单地实现最新的移动互联网(安卓、IOS、微信)流媒体直播与点播的需求，尤其是安防行业与互联网行业的衔接。<br>]]>
    
    </summary>
    
      <category term="EasyDarwin" scheme="http://lq08025107.github.io/tags/EasyDarwin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hadoop之HDFS]]></title>
    <link href="http://lq08025107.github.io/2016/02/29/Hadoop%E4%B9%8BHDFS/"/>
    <id>http://lq08025107.github.io/2016/02/29/Hadoop之HDFS/</id>
    <published>2016-02-29T12:14:01.000Z</published>
    <updated>2016-02-29T14:21:31.472Z</updated>
    <content type="html"><![CDATA[<p>Hadoop是Apache基金会研发的分布式系统基础架构，具体项目来源、发展历程随便上网查一查，一堆一堆的。不知道大家注意到没，市面上Hadoop书籍上面都是一只小象，据说是作者儿子的一个毛绒玩具，小孩子的创造力总是无穷的，才能有这么好听的名字，哈哈，开始，其实我研究的并不深，先是停留在原理性和了解性的阶段，并没有涉及代码层次。</p>
<p>Hadoop的中心思想是利用普通硬件组成集群，来替代性能高、价钱高的服务器，当然到了一个极限的话，价格再高也换不来高性能了，所以Hadoop<br>的出现很有必要。Hadoop主要是要解决两个方面的问题：<strong>存储</strong>、<strong>运算</strong>。这篇文章主要是讲存储系统，即HDFS。<br><a id="more"></a></p>
<p>HDFS(Hadoop Distribute File System，Hadoop分布式文件系统)1.首先是运行在廉价的服务器上 2.需要保存多个副本（默认3个副本），提供容错机制，副本丢失会自动恢复 3.HDFS将文件分割成block，默认大小是64M，然后将block按键值对存储在内存中，若block划分太小，小文件太多的话，内存开销太大，所以HDFS适合处理大数据。</p>
<p>先给出一幅图，然后对图中进行解释：<br><img src="http://7xr558.com1.z0.glb.clouddn.com/hdfs.png" alt="HDFS"></p>
<p>NameNode：名字节点，位于HDFS主端，指导从端的DataNode执行底层的I/O任务，是HDFS中最关键的一点，跟踪文件如何被分割成文件块，文件块被存储在哪些DataNode中等信息，监测整体运行是否正常。</p>
<p>DataNode：数据节点，存储数据，执行MapReduce运算(这个不属于HDFS范畴，不细说)</p>
<p>Secondary NameNode：不接收或记录HDFS的任何实时变化，仅与NameNode通信，按照时间间隔获取快照。</p>
<p>HDFS终究也是个文件系统，文件系统最主要还是离不开读写，无论底层怎么复杂，对用户都是透明的，我们可以大体看一下HDFS读文件的流程。<br><img src="http://7xr558.com1.z0.glb.clouddn.com/HDFS%20%E8%AF%BB%E6%96%87%E4%BB%B6.png" alt="HDFS读文件"></p>
<p>HDFS写文件，以创建新文件并保存为例。<br><img src="http://7xr558.com1.z0.glb.clouddn.com/HDFS%E6%96%B0%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%B9%B6%E4%BF%9D%E5%AD%98.png" alt="HDFS保存"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hadoop是Apache基金会研发的分布式系统基础架构，具体项目来源、发展历程随便上网查一查，一堆一堆的。不知道大家注意到没，市面上Hadoop书籍上面都是一只小象，据说是作者儿子的一个毛绒玩具，小孩子的创造力总是无穷的，才能有这么好听的名字，哈哈，开始，其实我研究的并不深，先是停留在原理性和了解性的阶段，并没有涉及代码层次。</p>
<p>Hadoop的中心思想是利用普通硬件组成集群，来替代性能高、价钱高的服务器，当然到了一个极限的话，价格再高也换不来高性能了，所以Hadoop<br>的出现很有必要。Hadoop主要是要解决两个方面的问题：<strong>存储</strong>、<strong>运算</strong>。这篇文章主要是讲存储系统，即HDFS。<br>]]>
    
    </summary>
    
      <category term="Hadoop HDFS" scheme="http://lq08025107.github.io/tags/Hadoop-HDFS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RPC(Remote Procedure Call Protocol)]]></title>
    <link href="http://lq08025107.github.io/2016/02/24/RPC-Remote-Procedure-Call-Protocol/"/>
    <id>http://lq08025107.github.io/2016/02/24/RPC-Remote-Procedure-Call-Protocol/</id>
    <published>2016-02-24T14:19:56.000Z</published>
    <updated>2016-03-06T05:52:31.200Z</updated>
    <content type="html"><![CDATA[<h1 id="1-_u5B9A_u4E49"><a href="#1-_u5B9A_u4E49" class="headerlink" title="1.定义"></a>1.定义</h1><p>RPC:Remote Procedure Call protocol,远程过程调用协议，通俗来讲即两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。</p>
<h1 id="2-_u8981_u89E3_u51B3_u7684_u95EE_u9898"><a href="#2-_u8981_u89E3_u51B3_u7684_u95EE_u9898" class="headerlink" title="2.要解决的问题"></a>2.要解决的问题</h1><p>正如定义所述，RPC从本质上来讲，只是一种网络通信，由于互联网的高速发展，同一台机器之间需要进行进程之间的通信，然后不同机器之间的进程也需要通信，RPC要解决的问题就是这个，RPC是分布式、集群的基础吧。<br><a id="more"></a></p>
<h1 id="3-_u5982_u4F55_u5B9E_u73B0"><a href="#3-_u5982_u4F55_u5B9E_u73B0" class="headerlink" title="3.如何实现"></a>3.如何实现</h1><p>引用如下的图，来说明RPC的实现原理<br><img src="http://7xr558.com1.z0.glb.clouddn.com/45366c44f775abfd0ac3b43bccc1abc3_r.jpg" alt="PicMissing"><br>从分层的角度来看，个人觉得RPC涉及到了应用层和传输层，这个图例一眼就能看懂，无需多言，如果要自己实现一个这样的框架，应该考虑哪些问题呢？</p>
<p>(A)在Server和Client之间建立TCP通信连接，可以是按需连接，也可以是长连接。</p>
<p>(B)Client如何找到Server，既然是通信，总需要一些向IP、Port之类的东西，还有与Server端的哪个进程的哪个方法通信等问题。</p>
<p>(C)方法的参数传递方式，Client需要把所谓的实参通过网络传递给Server端，就要涉及将内存中的值序列化成二进制的值。</p>
<p>(D)Server收到后需要进行反序列化，然后进行本地调用，得到返回值。</p>
<p>(E)Server将返回值序列化成二进制序列传输给Client，Client进行反序列化即可。</p>
<h1 id="4-_u6846_u67B6"><a href="#4-_u6846_u67B6" class="headerlink" title="4.框架"></a>4.框架</h1><p>RPC只是一个概念，当然有很多组织和企业用自己的方法实现，实现出来的结果就是所谓的框架，搜索了一下，主要有CORBA(Common Object Request Broker Architecture,通用对象请求代理体系结构)、JAVA RMI(Remote Method Invocation,远程方法调用)和Thrift(FB开源框架)等等。</p>
<h1 id="5-_u5B9E_u73B0"><a href="#5-_u5B9E_u73B0" class="headerlink" title="5.实现"></a>5.实现</h1><p>在4.框架中提到了Java的RPC，即RMI，由于我也是Java新手，所以就大体找了个HelloWorld试了试，转自<a href="http://lavasoft.blog.51cto.com/62575/91679/" target="_blank" rel="external">熔岩</a>,代码如下：<br>首先定义接口：IHello<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHello</span> <span class="keyword">extends</span> <span class="title">Remote</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHelloToSomeBody</span><span class="params">(String someBodyName)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后是服务器端的实现HelloImpl<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">IHello</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"HelloWorld!"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHelloToSomeBody</span><span class="params">(String someBodyName)</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Hello "</span>+someBodyName+<span class="string">"!"</span>;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后是服务器端的HelloServer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;&lt;code&gt;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming; </span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServer</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			IHello rhello=<span class="keyword">new</span> HelloImpl();</span><br><span class="line">			LocateRegistry.createRegistry(<span class="number">8888</span>);</span><br><span class="line">			Naming.bind(<span class="string">"rmi://localhost:8888/RHello"</span>,rhello);</span><br><span class="line">			System.out.println(<span class="string">"INFO:Bingding Remote Object IHello Successfully!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(RemoteException e)&#123;</span><br><span class="line">			System.out.println(<span class="string">"Creating Remote Object Exception"</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="keyword">catch</span>(AlreadyBoundException e)&#123;</span><br><span class="line">			System.out.println(<span class="string">"AlreadyBoundException"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(MalformedURLException e)&#123;</span><br><span class="line">			System.out.println(<span class="string">"MalformedURLException"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>到此可以运行起来Server端，就不上图了，很简单。</p>
<p>最后是客户端的HelloClient<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming; </span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClient</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			IHello rhello=(IHello)Naming.lookup(<span class="string">"rmi://localhost:8888/RHello"</span>);</span><br><span class="line">			System.out.println(rhello.helloWorld());</span><br><span class="line">			System.out.println(rhello.sayHelloToSomeBody(<span class="string">"LiuQiang"</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(NotBoundException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(MalformedURLException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(RemoteException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后上一张图：<br><img src="http://7xr558.com1.z0.glb.clouddn.com/RMIClient.png" alt="PicMissing"><br>打算如果有时间，试试facebook的RPC：Thrift。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="1-_u5B9A_u4E49"><a href="#1-_u5B9A_u4E49" class="headerlink" title="1.定义"></a>1.定义</h1><p>RPC:Remote Procedure Call protocol,远程过程调用协议，通俗来讲即两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。</p>
<h1 id="2-_u8981_u89E3_u51B3_u7684_u95EE_u9898"><a href="#2-_u8981_u89E3_u51B3_u7684_u95EE_u9898" class="headerlink" title="2.要解决的问题"></a>2.要解决的问题</h1><p>正如定义所述，RPC从本质上来讲，只是一种网络通信，由于互联网的高速发展，同一台机器之间需要进行进程之间的通信，然后不同机器之间的进程也需要通信，RPC要解决的问题就是这个，RPC是分布式、集群的基础吧。<br>]]>
    
    </summary>
    
      <category term="RPC Java" scheme="http://lq08025107.github.io/tags/RPC-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://lq08025107.github.io/2016/02/22/Hello-World/"/>
    <id>http://lq08025107.github.io/2016/02/22/Hello-World/</id>
    <published>2016-02-22T13:31:57.000Z</published>
    <updated>2016-03-06T05:52:06.499Z</updated>
    <content type="html"><![CDATA[<p>这是我使用Github+Hexo的第一篇博客，也不管到底是技术博还是生活或者情感博了，也不知道以后会不会继续更新了，但至少我知道有一个地方，在无聊的时候我可以进来发泄一下。</p>
<p>今天是正月十五，元宵节，这个节日在我家乡那边算一个很隆重的节日了，刚才爸爸和姐姐去溜大街了，想想自己好久没在家过元宵节了。还记得很小很小的时候，我们还在村里住着，元宵节我和姐姐到城里外婆家过十五，两个人可能一共有1块钱，我姐掌管着（小时候我很依靠姐姐），然后走到烤羊肉串旁边，我说：姐姐，我想吃羊肉串。我俩都不知道那到底是什么味道，后来，姐姐花了2毛钱给我买了一串，具体什么味道早已经忘记了，可是这个细节我记了很久很久。<br><a id="more"></a></p>
<p>上传几张照片，今天突然很想姐姐。<br><img src="http://7xr558.com1.z0.glb.clouddn.com/DSC05428.JPG" alt="PicMissing"><br>这张是我大三时候姐姐去天津找我玩</p>
<p><img src="http://7xr558.com1.z0.glb.clouddn.com/DSC05418.JPG" alt="PicMissing"><br>嘿嘿，我姐漂亮吧</p>
<p>前几天姐来北京拍了婚纱照了，time fly，很怀念小的时候，愿我们都好！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是我使用Github+Hexo的第一篇博客，也不管到底是技术博还是生活或者情感博了，也不知道以后会不会继续更新了，但至少我知道有一个地方，在无聊的时候我可以进来发泄一下。</p>
<p>今天是正月十五，元宵节，这个节日在我家乡那边算一个很隆重的节日了，刚才爸爸和姐姐去溜大街了，想想自己好久没在家过元宵节了。还记得很小很小的时候，我们还在村里住着，元宵节我和姐姐到城里外婆家过十五，两个人可能一共有1块钱，我姐掌管着（小时候我很依靠姐姐），然后走到烤羊肉串旁边，我说：姐姐，我想吃羊肉串。我俩都不知道那到底是什么味道，后来，姐姐花了2毛钱给我买了一串，具体什么味道早已经忘记了，可是这个细节我记了很久很久。<br>]]>
    
    </summary>
    
      <category term="生活" scheme="http://lq08025107.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://lq08025107.github.io/2016/02/22/11/"/>
    <id>http://lq08025107.github.io/2016/02/22/11/</id>
    <published>2016-02-22T13:31:57.000Z</published>
    <updated>2016-04-19T14:24:15.267Z</updated>
    <content type="html"><![CDATA[<p>11</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>11</p>
]]>
    </summary>
    
      <category term="生活" scheme="http://lq08025107.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
